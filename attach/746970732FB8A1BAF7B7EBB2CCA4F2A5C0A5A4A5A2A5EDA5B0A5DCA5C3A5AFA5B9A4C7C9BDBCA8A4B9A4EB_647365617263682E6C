;;; -*- Mode: Lisp; Package: EDITOR -*-
;;;
;;; dsearch.l
;;;
;;; Last updated: "2005/07/10 11:03:05 +0900"
;;;
#|
このlispを作成するにあたり、深江さんの psearch.l と須田さんの文字列取得検索、
および OHKUBO Hiroshi さんの clickable-uri.l を参考にさせて頂きました。m(__)m
作者が書いた部分については引用・改変・再配布など自由に行ってもらって構いません。
ご自身の責任でご使用ください。


◆search-dialog に「一覧表示」・「設定保存」・「行(文字列)単位」・「検索方法」を追加しています。
◆search-dialog での設定を引き継いで検索を行います。
◆search-dialog で「行(文字列)単位」にチェックを入れると一覧を行単位で表示します（入れないと文字列単位）。
◆dsearch-input の時、カーソル位置から前方検索（C-u M-x dsearch-input などで後方検索）してダイアログに
　フォーカスを設定します（search-dialog から一覧表示する場合も同様です）。
◆regexp-keyword-list または set-text-attribute を使用して検索語の強調表示を行います。
◆M-1～0（digit-argument）M-x dsearch-input で検索方法などを指定して検索を行います。
◆*dsearch-search-string-separator* で指定した文字列で検索語を区切って AND または OR 検索を行います。
・例えば、*dsearch-search-string-separator*（検索語の区切り）が "&" で 検索語に 「dsearch&dialog」 と入力すると、
　*dsearch-search-method*（検索方法）が "AND" または "OR" の時は、それぞれ文字列「dsearch」と「dialog」で
　AND または OR 検索を行い、"NORMAL" の時は、文字列「dsearch&dialog」で通常検索を行います。

◆M-x dsearch でカーソル下またはセレクションの文字列でバッファを検索して結果をダイアログボックスで表示
◆ダイアログから
　1.「移動」で任意の位置にジャンプ
　2.「上検索」で検索語を入力して後方検索（「下検索」で前方検索）
　3.「元に戻す」でダイアログを表示したときの検索語・フォーカス位置・カーソル位置に戻す
　4.「切り替え」で行単位⇔文字列単位の切り替え
　5.「設定」（または M-x dsearch-assign-variables）で各種変数の設定
　　①検索語の区切り
　　②ダイアログの幅
　　③検索語を入力するコンボボックスの幅
　　④ヒットした行の文字列を表示するリストの幅
　　⑤ヒットした文字列の前に表示するリストの幅（文字列単位で表示する場合）
　　⑥ダイアログの縦位置
　　⑦ダイアログの横位置
　　⑧「上検索」・「下検索」・「元に戻す」の時に移動する行の表示位置（入力しなければウィンドウ中央に表示）
　6.「縦位置」（ダイアログ）・「表示位置」（検索行、空欄なら画面中央に表示）を指定
　7.「検索方法」を指定して、「上検索」または「下検索」で再度検索
◆M-x dsearch-input で検索語を入力して検索結果をダイアログで表示
◆M-x dsearch-again で前回検索した文字列でバッファを再検索して結果をダイアログで表示
◆M-x dsearch-goto-previous-point で、バッファ毎に、前に（M-x dsearch-goto-next-point で後に）
　ダイアログを表示した（またはダイアログからジャンプした）位置に戻る
◆M-x dsearch-delete-highlight-matches で検索語の強調を取り消し


設定例:（キーバインドはお好みで）
(require "dsearch")

;; 強調表示の属性の指定
(setq *dsearch-keyword-color* '(:color 6 0 :underline :bold))	;regexp-keyword-listを使う場合
(setq *dsearch-attributes* '(:foreground 6 :bold t :underline t))	;set-text-attributeを使う場合

;; 強調表示の方式の指定（t だと regexp-keyword-listを、nil だと set-text-attributeを使う）
(setq *dsearch-highlight-method* t)

(add-hook '*show-match-hook* 'dsearch-highlight-last-search)	;全ての検索時に強調表示を行う場合

(global-set-key #\C-1 'dsearch-input)
(global-set-key #\C-2 'dsearch)
(global-set-key #\C-3 'dsearch-again)
(global-set-key #\C-4 'dsearch-goto-previous-point)
(global-set-key #\C-5 'dsearch-goto-next-point)
(global-set-key #\C-6 'dsearch-delete-highlight-matches)


アンインストール:
M-x dsearch-uninstall した後で dsearch.l に関する記述・ファイルを削除して下さい
（siteinit.l に記述していた場合は再ダンプが必要）。
|#

(provide "dsearch")

(in-package "editor")

(require "dialogs")

(export '(dsearch
	  dsearch-input
	  dsearch-again
	  dsearch-set-marker
	  dsearch-goto-previous-point
	  dsearch-goto-next-point
	  dsearch-assign-variables
	  dsearch-highlight-matches
	  dsearch-delete-highlight-matches
	  dsearch-highlight-last-search
	  dsearch-uninstall
	  *dsearch-keyword-color*
	  *dsearch-attributes*
	  *dsearch-attributes-tag*
	  *dsearch-highlight-method*
	  *dsearch-dialog-width*
	  *dsearch-combobox-width*
	  *dsearch-list-width*
	  *dsearch-front-list-width*
	  *dsearch-vertical-position*
	  *dsearch-side-position*
	  *dsearch-display-position*
	  *dsearch-search-method*
	  *dsearch-search-string-separator*))


;;; 変数の定義

(define-history-variable *dsearch-form* nil)	;t だと行単位、nil だと文字列単位でダイアログを表示
(define-history-variable *dsearch-dialog-width* 500)	;ダイアログボックスの幅
(define-history-variable *dsearch-combobox-width* 200)	;検索語を入力するコンボボックスの幅
(define-history-variable *dsearch-list-width* 500)	;ヒットした行の文字列を表示するリストの幅
(define-history-variable *dsearch-front-list-width* 60)	;ヒットした文字列の前に表示されるリストの幅
(define-history-variable *dsearch-vertical-position* 0)	;ダイアログの縦位置
(define-history-variable *dsearch-side-position* 50)	;ダイアログの横位置
(define-history-variable *dsearch-display-position* 20)	;検索行の表示位置
(defvar *dsearch-search-method-list* '("AND" "OR" "NORMAL"))	;検索方法のリスト
(define-history-variable *dsearch-search-method* "AND")	;検索方法
(define-history-variable *dsearch-search-string-separator* "&")	;検索語を区切る文字列

;; 強調表示の属性
;regexp-keyword-listを使う場合
(defvar *dsearch-keyword-color* '(:color 6 0 :underline :bold))

;set-text-attributeを使う場合
(defvar *dsearch-attributes* '(:foreground 6 :bold t :underline t))
(defvar *dsearch-attributes-tag* 'ds)	;強調表示のtag

;; 強調表示の方法（t だと regexp-keyword-listを、nil だと set-text-attributeを使う）
(defvar *dsearch-highlight-method* t)

(defvar *dsearch-substitute-line-feed* " ")	;改行を変換する文字列

(defvar-local *dsearch-last-string-list* nil)
(defvar-local *dsearch-last-setting* nil)
(defvar *last-dsearch-string* nil)
(defvar *last-dsearch-line* nil)
(defvar *last-dsearch-point* nil)
(defvar *dsearch-recover-str* nil)
(defvar *dsearch-recover-line* nil)
(defvar *dsearch-recover-point* nil)
(defvar *dsearch-recover-method* nil)
(defvar *dsearch-count-matches* nil)


;;; 汎用関数

;dsearch 用 scan-buffer
(defun dsearch-scan-buffer (str &key no-dup reverse limit)
  (scan-buffer str
	       :no-dup no-dup
	       :case-fold *case-fold-search*
	       :reverse reverse
	       :limit limit
	       :left-bound *word-search*
	       :right-bound *word-search*))

;改行を変換
(defun dsearch-substitute-line-feed (str)
  (unless (stringp *dsearch-substitute-line-feed*)
    (setq *dsearch-substitute-line-feed* " "))
  (substitute-string str "\n" *dsearch-substitute-line-feed*))

;マーカーを設定
(defun dsearch-set-marker ()
  (interactive)
  (make-local-variable 'dsearch-marker-list)
  (setq dsearch-marker-list (nsubst nil t dsearch-marker-list))
  (let ((marker (set-marker (make-marker) (point)))
	(marker-list (copy-alist dsearch-marker-list)))
    (dolist (l marker-list)
      (when (= (point) (marker-point (car l)))
	(setq dsearch-marker-list
	      (delete l dsearch-marker-list :test #'equal))))
    (push (cons marker t) dsearch-marker-list)))

;文字列を変換
(defun dsearch-convert-str (str)
  (when *understand-escape-sequences*
    (setq str (decode-escape-sequence str *regexp-search*)))
  (if *regexp-search*
      (setq str (compile-regexp str *case-fold-search*))
    (unless *word-search*
      (setq str (compile-regexp (regexp-quote str) *case-fold-search*))))
  str)

(defun dsearch-convert-str-1 (str regexp escape)
  (when escape
    (setq str (decode-escape-sequence str regexp)))
  (unless regexp
    (setq str (regexp-quote str)))
  str)

;表示位置を数値に変換
(defun dsearch-convert-display-position ()
  (or (integerp *dsearch-display-position*) (not *dsearch-display-position*)
      (setq *dsearch-display-position*
	    (parse-integer *dsearch-display-position* :junk-allowed t))))

;文字列を分離
(defun dsearch-search-string-separate (str)
  (unless (stringp *dsearch-search-string-separator*)
    (setq *dsearch-search-string-separator* "&"))
  (let ((start 0) end str1 str-list)
    (while
	(setq end (string-match *dsearch-search-string-separator* str start))
      (setq str1 (substring str start end)
	    start (+ end (length *dsearch-search-string-separator*)))
      (when (string/= str1 "")
	(pushnew str1 str-list :test #'equal)))
    (setq str1 (substring str start))
    (when (string/= str1 "")
      (pushnew str1 str-list :test #'equal))
    (reverse str-list)))

;ダイアログにフォーカスを設定する
(defun focus-dsearch-list (str arg &optional no-dup search)
  (when str
    (flet ((set-pos ()
	     (setq *last-dsearch-line* (current-line-number)
		   *last-dsearch-point* (point))))
      (flet ((set-focus (&optional s)
	       (let (str-list)
		 (when (or (string= *dsearch-search-method* "AND")
			   (string= *dsearch-search-method* "OR"))
		   (unless (setq str-list
				 (dsearch-search-string-separate str))
		     (plain-error "ないよん")
		     (return-from focus-dsearch-list)))
		 (save-excursion
		   (when s
		     (if *dsearch-form*
			 (if no-dup
			     (progn
			       (goto-line (+ *last-dsearch-line* (if arg 0 1)))
			       (if arg (backward-char)))
			   (progn
			     (goto-line *last-dsearch-line*)
			     (if arg (goto-eol))))
		       (goto-char *last-dsearch-point*)))
		   (cond ((string= *dsearch-search-method* "AND")
			  (setq str (pop str-list))
			  (while (dsearch-scan-buffer (dsearch-convert-str str)
						      :no-dup no-dup
						      :reverse arg)
			    (setq no-dup t)
			    (when
				(block match-all ()
				  (dolist (str1 str-list)
				    (save-excursion
				      (goto-bol)
				      (unless (dsearch-scan-buffer (dsearch-convert-str str1)
								   :limit (save-excursion (goto-eol) (point)))
					(return-from match-all nil)))) t)
			      (set-pos)
			      (return-from set-focus t))))
			 ((string= *dsearch-search-method* "OR")
			  (let (line pt)
			    (dolist (str1 str-list)
			      (save-excursion
				(when
				    (dsearch-scan-buffer (dsearch-convert-str str1)
							 :no-dup no-dup
							 :reverse arg)
				  (when (or (not line) (if arg
							   (> (point) pt)
							 (< (point) pt)))
				    (setq str str1)
				    (setq line (current-line-number))
				    (setq pt (point))))))
			    (when line
			      (setq *last-dsearch-line* line
				    *last-dsearch-point* pt)
			      (return-from set-focus t))))
			 (t
			  (when
			      (dsearch-scan-buffer (dsearch-convert-str str)
						   :no-dup no-dup
						   :reverse arg)
			    (set-pos)
			    (return-from set-focus t)))))
		 (unless s
		   (set-pos))
		 nil)))
	(cond (search
	       (when (pre-selection-p) (stop-selection))
	       (if (set-focus t)
		   (progn
		     (if *dsearch-form*
			 (goto-line *last-dsearch-line*)
		       (goto-char *last-dsearch-point*))
		     (dsearch-scan-buffer (dsearch-convert-str str))
		     (show-match))
		 (goto-char *last-dsearch-point*)))
	      ((pre-selection-p)
	       (let ((from (selection-mark))
		     (to (selection-point)))
		 (when (eq (get-selection-type) 3)
		   (stop-selection))
		 (when (> from to) (rotatef from to))
		 (save-excursion (goto-char from)
		   (set-focus))))
	      (t
	       (set-focus)))))))

;元に戻すための変数の設定
(defun dsearch-set-variables-to-recover (str)
  (setq *dsearch-recover-str* str
	*dsearch-recover-line* *last-dsearch-line*
	*dsearch-recover-point* *last-dsearch-point*
	*dsearch-recover-method* *dsearch-search-method*))

;単語の先頭に移動（須田さんの文字列取得検索より引用しました）
(defun goto-word-head ()
  (cond ((looking-at " ")
	 (backward-word 1))
	((looking-at "\\<"))
	(t
	 (backward-word 1))))

; *last-search-string* などに文字列を代入
(defun dsearch-set-last-search-variables (str)
  (if *understand-escape-sequences*
      (setq *last-search-string-pair*
	    (cons str
		  (setq str (decode-escape-sequence
			     str *regexp-search*))))
    (setq *last-search-string-pair* nil))
  (if *regexp-search*
      (setq *last-search-regexp* str)
    (setq *last-search-string* str)))


;;; 検索結果をダイアログボックスで表示

;カーソル下またはセレクションの文字列で検索
(defun dsearch ()
  (interactive)
  (case (get-selection-type)
    ((1 2)
     (dsearch-selection-start-end (from to)
				  (let ((str (buffer-substring from to)))
				    (focus-dsearch-list str nil)
				    (dsearch-set-variables-to-recover str)
				    (dsearch-dialog str t))))
    (3)
    (t
     (let* ((from (save-excursion (goto-word-head) (point)))
	    (to (save-excursion (forward-word) (point)))
	    (str (buffer-substring from to)))
       (if (and str (string/= "" str))
	   (progn
	     (setq *last-dsearch-line*
		   (save-excursion (goto-char from) (current-line-number))
		   *last-dsearch-point* from)
	     (dsearch-set-variables-to-recover str)
	     (dsearch-dialog str t))
	 (plain-error "ないよん"))))))

;文字列を入力して検索
(defun dsearch-input (str)
  (interactive "sdsearch: "
    :default0 (or (dsearch-selection-start-end (start end) (buffer-substring start end))
		  *last-dsearch-string*) :history0 'search)
  (if (> (length str) 0)
      (progn
	(when (eq *prefix-args* 'digit-argument)
	  (flet ((set-variables (sel value)
		   (let* ((reply-list (case sel
					(0 *dsearch-search-method-list*)
					(1 '("yes" "no" "smart"))
					(t '("yes" "no"))))
			  (reply
			   (completing-read
			    (format nil "~A (~A): "
				    (case sel
				      (0 "検索方法")
				      (1 "大文字小文字を区別する")
				      (2 "単語単位で検索する")
				      (3 "正規表現")
				      (4 "エスケープシーケンスを理解しろ"))
				    (subseq (format nil "~{ ~A~}" reply-list) 1))
			    reply-list
			    :case-fold t
			    :default (case sel
				       (0 *dsearch-search-method*)
				       (1 (cond ((eq *case-fold-search* :smart)
						 "smart")
						(*case-fold-search*
						 "no")
						(t
						 "yes")))
				       (t (if value "yes" "no")))
			    :must-match t)))
		     (setq value (string-equal reply "yes"))
		     (case sel
		       (0 (setq *dsearch-search-method* reply))
		       (1 (setq *case-fold-search* (cond ((string-equal reply "no")
							  t)
							 ((string-equal reply "yes")
							  nil)
							 ((string-equal reply "smart")
							  :smart))))
		       (2 (setq *word-search* value))
		       (3 (setq *regexp-search* value))
		       (4 (setq *understand-escape-sequences* value))))))
	    (dotimes (x 5)
	      (if (and (= x 3) *word-search*)
		  (setq *regexp-search* nil)
		(set-variables x (case x
				   (2 *word-search*)
				   (3 *regexp-search*)
				   (4 *understand-escape-sequences*)))))))
	(focus-dsearch-list str (eq *prefix-args* 'universal-argument))
	(dsearch-set-variables-to-recover str)
	(dsearch-dialog str t))
    (plain-error "文字列が入力されていません")))

;ダイアログに表示するリストの作成
(defun dsearch-make-list (str-list)
  (let (no-dup (line 0) matches from to num lnum front text)
    (flet ((set-range-and-lnum ()
	     (setq from (save-excursion (goto-bol) (point))
		   to (save-excursion
			(goto-char (match-end 0)) (goto-eol) (point))
		   lnum (if (default-line-number-mode)
			    (current-virtual-line-number)
			  (current-line-number))))
	   (match-all ()
	     (dolist (str1 str-list)
	       (save-excursion
		 (goto-bol)
		 (unless (dsearch-scan-buffer (dsearch-convert-str str1)
					      :limit (save-excursion (goto-eol) (point)))
		   (return-from match-all nil)))) t))
      (flet ((make-list (str)
	       (goto-char (point-min))
	       (while (dsearch-scan-buffer (dsearch-convert-str str)
					   :no-dup no-dup)
		 (setq no-dup t)
		 (if *dsearch-form*
		     (flet ((add ()
			      (incf *dsearch-count-matches*)
			      (push (list lnum text num str) matches)))
		       (setq num (current-line-number))
		       (when (/= line num)
			 (set-range-and-lnum)
			 (setq line num
			       text (dsearch-substitute-line-feed
				     (string-left-trim '(#\SPC #\TAB #\　)
						       (buffer-substring from to))))
			 (cond ((string= *dsearch-search-method* "AND")
				(when (match-all)
				  (add)))
			       ((string= *dsearch-search-method* "OR")
				(unless
				    (block same-line ()
				      (dolist (l matches)
					(when (= num (third l))
					  (return-from same-line t))))
				  (add)))
			       (t
				(add)))))
		   (flet ((add ()
			    (incf *dsearch-count-matches*)
			    (push (list lnum num front text str) matches)))
		     (set-range-and-lnum)
		     (setq num (point)
			   front (buffer-substring from num)
			   text (dsearch-substitute-line-feed (buffer-substring num to)))
		     (cond ((string= *dsearch-search-method* "AND")
			    (when (match-all)
			      (add)))
			   (t
			    (add))))))))
	(setq *dsearch-count-matches* 0)
	(save-excursion
	  (if (string= *dsearch-search-method* "OR")
	      (dolist (str str-list)
		(make-list str))
	    (make-list (pop str-list))))))
    (sort matches #'< :key (if *dsearch-form*
			       #'third
			     #'second))))

;ダイアログの生成
(defun dsearch-dialog (str &optional marker-set)
  (if str
      (let ((display-str (dsearch-substitute-line-feed str))
	    str1 str-list setting list caption focus-list fkey column)
	(setq *last-dsearch-string* str)
	(if (or (string= *dsearch-search-method* "AND")
		(string= *dsearch-search-method* "OR"))
	    (if (setq str-list
		      (dsearch-search-string-separate str))
		(setq str1 (car str-list))
	      (progn
		(plain-error "ないよん")
		(return-from dsearch-dialog)))
	  (setq *dsearch-search-method* "NORMAL"
		str-list (list str)
		str1 str))
	(when (string/= str str1)
	  (dolist (str2 (reverse str-list))
	    (add-history str2 '*minibuffer-search-string-history*)))
	(add-history str '*minibuffer-search-string-history*)
	(dsearch-set-last-search-variables str1)
	(setq *last-search-p* t
	      *last-search-regexp-p* *regexp-search*)
	(setq list (dsearch-make-list str-list))
	(if list
	    (flet ((refresh ()
		     (refresh-screen t)
		     (refresh-screen)))
	      (setq setting (list *case-fold-search*
				  *regexp-search*
				  *understand-escape-sequences*))
	      (dsearch-delete-highlight-matches str-list setting)
	      (dolist (str1 str-list)
		(dsearch-highlight-matches str1 setting))
	      (when marker-set
		(dsearch-set-marker))
	      (message "<~A> ~D件ヒットしました" display-str *dsearch-count-matches*)
	      (if *dsearch-form*
		  (setq caption "検索結果(行単位)"
			focus-list *last-dsearch-line*
			fkey #'caddr
			column `(-6 ,*dsearch-list-width* 0 0))
		(setq caption "検索結果(文字列単位)"
		      focus-list *last-dsearch-point*
		      fkey #'cadr
		      column `(-6 0 ,(- *dsearch-front-list-width*) ,*dsearch-list-width* 0)))
	      (or (integerp *dsearch-dialog-width*)
		  (setq *dsearch-dialog-width* 500))
	      (or (integerp *dsearch-combobox-width*)
		  (setq *dsearch-combobox-width* 200))
	      (or (integerp *dsearch-list-width*)
		  (setq *dsearch-list-width* 500))
	      (or (integerp *dsearch-front-list-width*)
		  (setq *dsearch-front-list-width* 60))
	      (or (integerp *dsearch-vertical-position*)
		  (setq *dsearch-vertical-position* 0))
	      (or (integerp *dsearch-side-position*)
		  (setq *dsearch-side-position* 50))
	      (dsearch-convert-display-position)
	      (multiple-value-bind (result data)
		  (dialog-box
		   `(dialog ,*dsearch-side-position* ,*dsearch-vertical-position* ,*dsearch-dialog-width* 139
			    (:caption ,caption)
			    (:font 9 "MS UI Gothic")
			    (:control
			     (:listbox list nil #x50b10111 4 20 ,(- *dsearch-dialog-width* 50) 117)
			     (:static nil "検索(&S):" #x50020000 4 6 30 8)
			     (:combobox search nil #x50210842 30 3 ,*dsearch-combobox-width* 96)
			     (:static nil "縦位置(&V):" #x50020000 ,(+ *dsearch-combobox-width* 36) 6 35 8)
			     (:edit vertical nil #x50810086 ,(+ *dsearch-combobox-width* 71) 4 20 14)
			     (:static nil "表示位置(&D):" #x50020000 ,(+ *dsearch-combobox-width* 97) 6 41 8)
			     (:edit display nil #x50810086 ,(+ *dsearch-combobox-width* 138) 4 20 14)
			     (:static nil "検索方法(&M):" #x50020000 ,(+ *dsearch-combobox-width* 165) 6 45 8)
			     (:combobox method nil #x50210003 ,(+ *dsearch-combobox-width* 207) 3 42 60)
			     (:button go "移動(&G)" #x50010001 ,(- *dsearch-dialog-width* 43) 5 40 14)
			     (:button previous "上検索(&P)" #x50010000 ,(- *dsearch-dialog-width* 43) 24 40 14)
			     (:button next "下検索(&N)" #x50010000 ,(- *dsearch-dialog-width* 43) 43 40 14)
			     (:button recover "元に戻す(&R)" #x50010000 ,(- *dsearch-dialog-width* 43) 62 40 14)
			     (:button IDCANCEL "キャンセル" #x50010000 ,(- *dsearch-dialog-width* 43) 81 40 14)
			     (:button change "切り替え(&C)" #x50010000 ,(- *dsearch-dialog-width* 43) 100 40 14)
			     (:button assign "設定(&A)" #x50010000 ,(- *dsearch-dialog-width* 43) 119 40 14)
			     ))
		   (list (cons 'search *minibuffer-search-string-history*)
			 (cons 'search str)
			 (cons 'vertical (format nil "~D" *dsearch-vertical-position*))
			 (cons 'display (format nil "~A" (or *dsearch-display-position* "")))
			 (cons 'method *dsearch-search-method-list*)
			 (cons 'method (or (position *dsearch-search-method*
						     *dsearch-search-method-list* :test #'equal) 0))
			 (cons 'list list)
			 (cons 'list (find focus-list list :key fkey))
			 )
		   `((list :column ,column :must-match t :enable (go previous next change))
		     (vertical :enable (go previous next change) :type integer :non-null t
			       :type-error "縦位置を入力してしださい")
		     (recover :no-result t)
		     (assign :no-result t)
		     ))
		(when result
		  (let ((string (cdr (assoc 'search data))))
		    (flet ((check-input ()
			     (unless (and string (string/= "" string))
			       (plain-error "検索文字列を入力して")
			       (return-from dsearch-dialog)))
			   (set-variables ()
			     (setq *dsearch-vertical-position* (cdr (assoc 'vertical data))
				   *dsearch-display-position* (cdr (assoc 'display data)))
			     (dsearch-convert-display-position)
			     (if *dsearch-form*
				 (setq *last-dsearch-line* (cadddr (assoc 'list data)))
			       (setq *last-dsearch-point* (caddr (assoc 'list data)))))
			   (get-position ()
			     (if *dsearch-form*
				 *last-dsearch-line*
			       *last-dsearch-point*))
			   (get-string ()
			     (if *dsearch-form*
				 (fifth (assoc 'list data))
			       (sixth (assoc 'list data)))))
		      (cond ((eq result 'go)
			     (set-variables)
			     (dsearch-jump-word (get-position)
						(get-string)))
			    ((or (eq result 'previous) (eq result 'next))
			     (let ((pos (get-position))
				   (last-method *dsearch-search-method*)
				   no-dup)
			       (check-input)
			       (setq *dsearch-search-method* (cdr (assoc 'method data)))
			       (set-variables)
			       (setq no-dup
				     (and (= pos (get-position))
					  (= (current-line-number) *last-dsearch-line*)
					  (string= last-method *dsearch-search-method*)
					  (string= str string)))
			       (focus-dsearch-list string (eq result 'previous) no-dup t)
			       (recenter *dsearch-display-position*)
			       (refresh)
			       (dsearch-dialog string)))
			    ((eq result 'recover)
			     (setq *last-dsearch-line* *dsearch-recover-line*
				   *last-dsearch-point* *dsearch-recover-point*
				   *dsearch-search-method* *dsearch-recover-method*)
			     (when (pre-selection-p) (stop-selection))
			     (when (boundp 'dsearch-marker-list)
			       (goto-char (marker-point (caar dsearch-marker-list))))
			     (recenter *dsearch-display-position*)
			     (clear-reverse-region)
			     (refresh)
			     (dsearch-dialog *dsearch-recover-str*))
			    ((eq result 'change)
			     (set-variables)
			     (if *dsearch-form*
				 (unless (and *last-dsearch-point*
					      (save-excursion (goto-char *last-dsearch-point*)
						(= *last-dsearch-line* (current-line-number))))
				   (save-excursion
				     (goto-line *last-dsearch-line*)
				     (dsearch-scan-buffer (dsearch-convert-str (get-string)))
				     (setq *last-dsearch-point* (point))))
			       (save-excursion (goto-char *last-dsearch-point*)
				 (setq *last-dsearch-line* (current-line-number))))
			     (setq *dsearch-form* (not *dsearch-form*))
			     (dsearch-dialog str))
			    ((eq result 'assign)
			     (dsearch-assign-variables))
			    ))))))
	  (plain-error "<~A> 文字列が見つかりません" display-str)))
    (plain-error "ないよん")))

;検索結果にジャンプ
(defun dsearch-jump-word (pos str)
  (if *dsearch-form*
      (goto-line pos)
    (goto-char pos))
  (when (dsearch-scan-buffer (dsearch-convert-str str))
    (show-match))
  (dsearch-set-last-search-variables str)
  (dsearch-set-marker)
  (recenter))

;前回検索した文字列で再検索
(defun dsearch-again (&optional no-recover)
  (interactive)
  (cond ((and *last-dsearch-string* (string/= "" *last-dsearch-string*))
	 (unless no-recover
	   (dsearch-set-variables-to-recover *last-dsearch-string*))
	 (dsearch-dialog *last-dsearch-string* (not no-recover)))
	(t
	 (plain-error "検索がなされていません"))))

;前回ダイアログを表示した（または検索結果からジャンプした）位置に戻る
(defun dsearch-goto-previous-point (&optional next)
  (interactive)
  (when (pre-selection-p) (stop-selection))
  (make-local-variable 'dsearch-marker-list)
  (if (boundp 'dsearch-marker-list)
      (let ((marker-list (if next (reverse dsearch-marker-list) dsearch-marker-list))
	    pos lst)
	(dolist (l marker-list)
	  (let ((pt (marker-point (car l))))
	    (when (cdr l)
	      (if (= (point) pt)
		  (if
		      (and
		       (setq pos (position l marker-list)
			     lst (nth (1+ pos) marker-list)
			     pt (car lst))
		       (setf (cdr lst) t)
		       (goto-char pt))
		      (setf (cdr l) nil)
		    (plain-error "ないよん"))
		(goto-char pt))
	      (return-from dsearch-goto-previous-point)))))
    (plain-error "マーカーが設定されていません")))

(defun dsearch-goto-next-point ()
  (interactive)
  (dsearch-goto-previous-point t))

;各種変数の設定
(defun dsearch-assign-variables ()
  (interactive)
  (setq *dsearch-search-string-separator*
	(read-string "検索語の区切り: "
		     :default (format nil "~A" *dsearch-search-string-separator*))
	*dsearch-dialog-width*
	(parse-integer (read-string "ダイアログの幅: "
				    :default (format nil "~A" *dsearch-dialog-width*)))
	*dsearch-combobox-width*
	(parse-integer (read-string "コンボボックスの幅: "
				    :default (format nil "~A" *dsearch-combobox-width*)))
	*dsearch-list-width*
	(parse-integer (read-string "リストの幅: "
				    :default (format nil "~A" *dsearch-list-width*))))
  (unless *dsearch-form*
    (setq *dsearch-front-list-width*
	  (parse-integer (read-string "検索語の前に表示するリストの幅: "
				      :default (format nil "~A" *dsearch-front-list-width*)))))
  (setq *dsearch-vertical-position*
	(parse-integer (read-string "ダイアログの縦位置: "
				    :default (format nil "~A" *dsearch-vertical-position*)))
	*dsearch-side-position*
	(parse-integer (read-string "ダイアログの横位置: "
				    :default (format nil "~A" *dsearch-side-position*)))
	*dsearch-display-position*
	(read-string "検索行の表示位置: " :default (format nil "~A" (or *dsearch-display-position* ""))))
  (dsearch-convert-display-position)
  (dsearch-again t))


;;; 検索語の強調

;検索語の強調
(defun dsearch-highlight-matches (str setting)
  (when str
    (let ((case-fold (first setting))
	  (regexp (second setting))
	  (escape (third setting)))
      (flet ((set-last-string-list-and-setting ()
	       (pushnew str *dsearch-last-string-list* :test #'string=)
	       (setq *dsearch-last-setting* setting)))
	(setq str (dsearch-convert-str-1 str regexp escape))
	(and (equal setting *dsearch-last-setting*)
	     (find str *dsearch-last-string-list* :test #'string=)
	     (return-from dsearch-highlight-matches))
	(if *dsearch-highlight-method*
	    (progn
	      (make-local-variable 'regexp-keyword-list)
	      (unless
		  (and (boundp 'regexp-keyword-list)
		       (dolist (keyword regexp-keyword-list)
			 (let ((key (car keyword)))
			   (and key
				(string= str
					 (if (regexpp key)
					     (compiled-regexp-source key)
					   key))
				(return-from dsearch-highlight-matches))))
		       nil)
		(set-last-string-list-and-setting)
		(let ((dsearch-keyword (compile-regexp-keyword-list
					`((,str ,case-fold ,*dsearch-keyword-color* t)))))
		  (setq regexp-keyword-list
			(if (boundp 'regexp-keyword-list)
			    (append dsearch-keyword regexp-keyword-list)
			  dsearch-keyword)))))
	  (let (no-dup)
	    (set-last-string-list-and-setting)
	    (save-excursion (goto-char (point-min))
	      (while (dsearch-scan-buffer (compile-regexp str case-fold)
					  :no-dup no-dup)
		(setq no-dup t)
		(apply #'set-text-attribute (match-beginning 0) (match-end 0)
		       (cons *dsearch-attributes-tag* str) *dsearch-attributes*)))))))
    (refresh-screen t)
    (refresh-screen)))

;強調の取り消し
(defun dsearch-delete-highlight-matches (&optional exclude-list setting)
  (interactive)
  (when *dsearch-last-string-list*
    (let ((last-string-list (copy-alist *dsearch-last-string-list*)) keyword-list)
      (when *dsearch-highlight-method*
	(make-local-variable 'regexp-keyword-list)
	(unless (boundp 'regexp-keyword-list)
	  (return-from dsearch-delete-highlight-matches))
	(setq keyword-list (copy-alist regexp-keyword-list)))
      (dolist (str last-string-list)
	(unless (and (equal setting *dsearch-last-setting*)
		     (block exclude ()
		       (dolist (exclude-str exclude-list)
			 (setq exclude-str (dsearch-convert-str-1 exclude-str
								  (second setting)
								  (third setting)))
			 (when (string= str exclude-str)
			   (return-from exclude t)))))
	  (setq *dsearch-last-string-list*
		(delete str *dsearch-last-string-list* :test #'string=))
	  (if *dsearch-highlight-method*
	      (dolist (keyword keyword-list)
		(let ((key (car keyword)))
		  (and key
		       (string= str (if (regexpp key)
					(compiled-regexp-source key)
				      key))
		       (setq regexp-keyword-list
			     (delete keyword
				     regexp-keyword-list :test #'equal)))))
	    (delete-text-attributes str
				    :key #'(lambda (x)
					     (and (consp x)
						  (eq (car x) *dsearch-attributes-tag*)
						  (cdr x)))
				    :test #'string=)))))
    (refresh-screen t)
    (refresh-screen)))

;全ての検索時に強調（*show-match-hook* に引っ掛けて使用）
(defun dsearch-highlight-last-search ()
  (show-match)
  (let ((str (if *last-search-regexp-p*
		 *last-search-regexp*
	       *last-search-string*))
	(setting (list *case-fold-search*
		       *regexp-search*
		       *understand-escape-sequences*)))
    (dsearch-delete-highlight-matches (list str) setting)
    (dsearch-highlight-matches str setting))
  t)


;;; search-dialog の書き換え

(setq *search-dialog-template*
      '(dialog 0 0 242 123
	(:caption "文字列の検索")
	(:font 9 "MS UI Gothic")
	(:control
	 (:static nil "検索(&S):" #x50020000 7 10 28 8)
	 (:combobox search nil #x50210842 39 8 140 96)
	 (:button case-fold "大文字小文字を区別する(&C)" #x50010006 39 27 96 10)
	 (:button word "単語単位で検索する(&W)" #x50010003 39 40 83 10)
	 (:button regexp "正規表現(&E)" #x50010003 39 53 52 10)
	 (:button escseq "エスケープシーケンスを理解しろ(&Y)" #x50010003 39 66 107 10)
	 (:button wrap "見つからなければ戻って検索(&V)" #x50010003 39 79 101 10)
	 (:button form "行(文字列)単位(&F)" #x50010003 39 92 70 10)
	 (:static nil "検索方法(&M):" #x50020000 39 106 45 10)
	 (:combobox method nil #x50210003 81 104 42 60)
	 (:button backward "上検索(&P)" #x50010000 185 7 50 14)
	 (:button forward "下検索(&N)" #x50010001 185 24 50 14)
	 (:button IDCANCEL "キャンセル" #x50010000 185 41 50 14)
	 (:button catalog "一覧表示(&D)" #x50010000 185 58 50 14)
	 (:button keep "設定保存(&K)" #x50010000 185 75 50 14))))

(defun search-dialog (&optional arg)
  (interactive "p")
  (multiple-value-bind (result data)
      (let ((string (or (dsearch-selection-start-end (start end)
						     (buffer-substring start end))
			(if *regexp-search*
			    *last-search-regexp*
			  *last-search-string*))))
	(dialog-box *search-dialog-template*
		    (list (cons 'search *minibuffer-search-string-history*)
			  (cons 'case-fold (cfs2dialog *case-fold-search*))
			  (cons 'word *word-search*)
			  (cons 'regexp *regexp-search*)
			  (cons 'search (if (eq (cdr *last-search-string-pair*)
						string)
					    (car *last-search-string-pair*)
					  string))
			  (cons 'escseq *understand-escape-sequences*)
			  (cons 'wrap *wrap-search*)
			  (cons 'form *dsearch-form*)
			  (cons 'method *dsearch-search-method-list*)
			  (cons 'method (or (position *dsearch-search-method*
						      *dsearch-search-method-list* :test #'equal) 0))
			  )
		    '((word :disable (regexp))
		      ;(search :non-null "検索文字列を入力して" :enable (forward backward))
		      )))
    (when result
      (let ((string (cdr (assoc 'search data))))
	(flet ((check-input ()
		 (unless (and string (string/= "" string))
		   (plain-error "検索文字列を入力して")
		   (return-from search-dialog)))
	       (keep-setting ()
		 (setq *case-fold-search* (dialog2cfs (cdr (assoc 'case-fold data))))
		 (setq *word-search* (cdr (assoc 'word data)))
		 (setq *regexp-search* (cdr (assoc 'regexp data)))
		 (setq *wrap-search* (cdr (assoc 'wrap data)))
		 (setq *understand-escape-sequences* (cdr (assoc 'escseq data)))
		 (setq *dsearch-form* (cdr (assoc 'form data)))
		 (setq *dsearch-search-method* (cdr (assoc 'method data)))
		 ))
	  (cond ((eq result 'keep)
		 (keep-setting))
		((eq result 'catalog)
		 (check-input)
		 (keep-setting)
		 (focus-dsearch-list string arg)
		 (dsearch-set-variables-to-recover string)
		 (dsearch-dialog string t))
		(t
		 (check-input)
		 (add-history string '*minibuffer-search-string-history*)
		 (keep-setting)
		 (if *understand-escape-sequences*
		     (setq *last-search-string-pair*
			   (cons string
				 (setq string (decode-escape-sequence
					       string *regexp-search*))))
		   (setq *last-search-string-pair* nil))
		 (search-command string (eq result 'backward)
				 (and (null *word-search*) *regexp-search*)
				 t nil)
		 (setq *last-dsearch-string* string
		       *last-dsearch-line* (current-line-number)
		       *last-dsearch-point* (point))
		 )))))))

(defun dsearch-get-selection-start-end ()
  (let (start end)
    (save-excursion
      (case (get-selection-type)
	(1
	 (setq start (progn
		       (goto-char (selection-point))
		       (goto-virtual-bol)
		       (point)))
	 (setq end (progn
		     (goto-char (selection-mark))
		     (goto-virtual-bol)
		     (point))))
	(2
	 (setq start (selection-point))
	 (setq end (selection-mark)))))
    ;(stop-selection)
    (values start end)))

(defmacro dsearch-selection-start-end ((start end) &body body)
  `(multiple-value-bind (,start ,end)
       (dsearch-get-selection-start-end)
     (when ,start
       ,@body)))


;;; アンインストール

(defun dsearch-uninstall ()
  (interactive)
  (unregister-history-variable '*dsearch-form*)
  (unregister-history-variable '*dsearch-search-method*)
  (unregister-history-variable '*dsearch-search-string-separator*)
  (unregister-history-variable '*dsearch-dialog-width*)
  (unregister-history-variable '*dsearch-combobox-width*)
  (unregister-history-variable '*dsearch-list-width*)
  (unregister-history-variable '*dsearch-front-list-width*)
  (unregister-history-variable '*dsearch-vertical-position*)
  (unregister-history-variable '*dsearch-side-position*)
  (unregister-history-variable '*dsearch-display-position*)
  )

;;;
