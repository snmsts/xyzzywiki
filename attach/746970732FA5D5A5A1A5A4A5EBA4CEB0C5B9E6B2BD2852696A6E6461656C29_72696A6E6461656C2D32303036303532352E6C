;;; rijndael.l
;;;
(eval-when (:compile-toplevel :load-toplevel :execute)
  (require "foreign")
  (unless (find-package "rijndael")
    (defpackage "rijndael" (:use "lisp" "editor")))
  (in-package "user")
  (import '(*rijn-dll-path* read-encrypt-file write-file-and-encrypt) "rijndael"))

(in-package "rijndael")

(export '(encrypt-file decrypt-file))

(defvar *rijn-dll-path* nil)
(unless *rijn-dll-path*
  (setq *rijn-dll-path* (merge-pathnames "rijn.dll" (si:system-root))))

(c:define-dll-entry c:int Rijndael-encrypt-file ((c:char *) (c:char *) (c:char *))
  *rijn-dll-path* "EncryptFile")
(c:define-dll-entry c:int Rijndael-decrypt-file ((c:char *) (c:char *) (c:char *))
  *rijn-dll-path* "DecryptFile")

(defun encrypt-file (source dest key)
  (case (Rijndael-encrypt-file (si:make-string-chunk source) (si:make-string-chunk dest) (si:make-string-chunk key))
    (-1 (error "暗号化元ファイルオープン時エラー"))
    (-2 (error "暗号化先ファイル作成時エラー"))
    (-3 (error "暗号化時エラー"))
    (t t)))

(defun decrypt-file (source dest key)
  (case (Rijndael-decrypt-file (si:make-string-chunk source) (si:make-string-chunk dest) (si:make-string-chunk key))
    (-1 (error "復号元ファイルオープン時エラー"))
    (-2 (error "復号先ファイル作成時エラー"))
    (-3 (error "復号時エラー"))
    (t t)))

(defun read-encrypt-file (file &optional key)
  (interactive "fRead File: ")
  (unless key
    (setq key (getpass)))
  (let ((dest (make-temp-file-name)))
    (unwind-protect
        (and (decrypt-file (map-slash-to-backslash file) (map-slash-to-backslash dest) key)
             (let ((buffer (create-new-buffer (file-namestring file))))
               (set-buffer buffer)
               (insert-file-contents dest t)))
      (delete-file dest)))
  t)

(defun write-file-and-encrypt (file &optional key)
  (interactive "FWrite File: ")
  (when (or (not (file-exist-p file))
            (no-or-yes-p "~aは既に存在します。上書きしますか?" file))
    (unless key (setq key (getpass)))
    (let ((source (make-temp-file-name)))
      (save-restriction
        (widen)
        (write-region (point-min) (point-max) source))
      (unwind-protect
          (encrypt-file (map-slash-to-backslash source) (map-slash-to-backslash file) key)
        (delete-file source)))
    t))

;;; from $XYZZY/lisp/wip/ftp.l
(defun getpass (&optional (prompt "Password: "))
  (let ((pw (make-vector 16 :element-type 'character :fill-pointer 0 :adjustable t)))
    (loop
      (minibuffer-prompt "~A~v@{~a~:*~}" prompt (length pw) #\*)
      (let ((c (read-char *keyboard*)))
        (case c
          (#\RET
           (return pw))
          (#\C-g
           (quit))
          (#\C-q
           (vector-push-extend (read-char *keyboard*) pw))
          (#\C-h
           (or (zerop (length pw))
               (vector-pop pw)))
          (t
           (vector-push-extend c pw)))))))
