;;-*-lisp-interaction-*-

(load-library "xml-parser-modoki")

(defvar datafile nil "リファレンスの場所")
(unless datafile
  (setq datafile (merge-pathnames "reference.xml" (etc-path))))

(defvar txtoutputfile nil "txtの出力先")
(unless txtoutputfile
  (setq txtoutputfile (merge-pathnames "reference.txt" (etc-path))))

(defvar kwdoutputfile nil "kwdの出力先")

(unless kwdoutputfile
  (setq kwdoutputfile (merge-pathnames "lisp" (etc-path))))


(defvar xmlcache nil "リファレンスの読み込み時キャッシュ")

(defvar xmltype nil "名前も適当")
(defvar xmlsection nil "")

;汎用関数
(defun get-elem (elem xmlist)
  "xmlの要素抽出関数（複数要素未対応）速度はこちらの方が速いと思うけどしらん"
  (assoc
   elem
   (cddr xmlist)
   :test #'string-equal))

(defun get-elems (elem xmlist)
  "xmlの要素抽出関数（複数要素対応版）"
  (let (Val)
    (dolist (i (cddr xmlist))
      (if (string-equal (car i) elem)
	  (setq Val (cons (cddr i) Val))
	))
    (cons elem Val)))

;;結果を書き換えるべからず
(defun xml ()
  "xmlリファレンスを読み込む"
  (if xmlcache
      xmlcache
    (setq xmlcache
	  (sort (cdar (ed::xmlpm-parse-file datafile))
		#'string-lessp :key #'(lambda (x) (caadr (get-elems "title" x)))))))


;;もう少し汎用化しといたほうがいいかも。
(defun type-set ()
  "タイプごとの集合を作る"
  (if xmltype
      xmltype
    (let (alist
	  section aso)
      (dolist (i (reverse (xml)))
	(setq section (caadr (get-elems "type" i)))
	(setq aso (assoc section alist :test #'string-equal ))
	(setq
	 aso
	 (if aso
	     aso
	   (car (push (list section nil) alist))))
	(push i (cdr aso)))
      (setq xmltype alist))))

(defun section-set ()
  "セクションごとの集合を作る"
  (if xmlsection
      xmlsection
    (let (alist section aso)
      (dolist (i (reverse (xml)))
	(setq section (caadr (get-elems "section" i)))
	(setq aso (assoc section alist :test #'string-equal ))
	(setq
	 aso
	 (if aso
	     aso
	   (car (push (list section nil) alist))))
	(push i (cdr aso)))
      (setq xmlsection alist))))


(defun elem-list (elem alist)
  "リストに含まれている全てのエレメントのリストを作る"
  (let (a)
    (dolist (i alist)
      (when i
	(pushnew (caadr (get-elems elem i)) a :test #'string-equal)))
    (sort a  #'string<)))

;txt出力用関数

(defun txtheader (fp)
  "txtヘッダ出力"
  (format fp "Converted from ~A by xml2txt.l at ~A\n"
	  datafile
	  (format-date-string "%g%e年%m月%d日"))
  (dotimes (i 70)
    (format fp "="))
  (format fp "\n"))

(defun txtchapter (fp)
  "txtの本文出力"
  (dolist (i (xml))
    ;;関数名
    (format fp "■~A~%"
	    (caadr (get-elems "title" i)))
    ;;付随要素
    (dolist (j '( "Type" "Arguments" "Package" "Seealso" "Link" "File" "Section" "Description"))
      (let ((q (get-elems j i)))
	(when (cadr q)
	  (let ((k ""))
	    (if (> (length (cdr q)) 1)
		(progn
		  (dolist (l (cdr q))
		    (setq k (format nil "~A ~A ," k (car l))))
		  (setq k (substring k 1 -2)))
	      (setq k (caadr q)))
	    (format fp "[~11@A]: ~A~%" j
		    ;;謎の書式修正
		    (if (string-match "" k)
			(format nil "~%~A"
				(substitute-string k  "" ""))
		      k))))))
    ;;フッタの改行
    (format fp "~2%")))

(defun txttips (fp)
  "目的別索引"
  (let (elist)
    (format fp "■目的別索引~%")
    (dolist (i (setq elist (elem-list "section" (cdr (assoc "Tips" (type-set) :test #'string-equal)))))
	       (format fp "  - ~A~%" i))
      (format fp "  - 関数一覧~2%")
    (dolist (i elist)
      (format fp "■~A~%" i)
      (dolist (j (cdr (assoc "Tips" (type-set) :test #'string-equal)))
	(when (string-equal (caadr(get-elems "section" j )) i)
	  (format fp "  - ~A~%" (caadr (get-elems "title" j)))))
      (format fp "~%"))))

(defun txtall (fp)
  "実質何もかも出力"
  (format fp "■関数一覧~%")
  (dolist (i (xml))
    (format fp "  - ~A~%" (caadr (get-elems "title" i))))
  (format fp "~%"))

;;to text
(defun xml2txt ()
  "to text"
  (with-open-file (fp txtoutputfile :direction :output)
    (txtheader fp)
    (txtchapter fp)
    (txttips fp)
    (txtall fp)))


;kwd出力用関数

;;速度なんて知らんねぇ
(defun xml2kwd ()
  "to kwd"
  (with-open-file (fp kwdoutputfile :direction :output)
    (dolist (i (xml))
      (when
	  (find
	   (caadr (get-elems "type" i))
	   '("Function" "Special Form" "Macro" "Misc")
	   :test #'string-equal)
	(format fp "~A~%"   (caadr (get-elems "title" i)))))
    (format fp ";*2~%")
    (dolist (i (xml))
      (when
	  (string-equal
	   (caadr (get-elems "type" i))
	   "Variable")
	(format fp "~A~%"   (caadr (get-elems "title" i)))))))

#|闇に葬る。アーメン
(defun xml2wiki ()
  "to wiki"
  (dolist (i (xml))
    (let (
	  (title (caddr (get-elem "title" i)))
	  (type  (caddr (get-elem "type" i)))
	  (arg   (caddr (get-elem "arguments" i)))
	  (pack  (caddr (get-elem "package" i)))
	  (link  (caddr (get-elem "link" i)))
	  (sect  (caddr (get-elem "section" i)))
	  (file  (caddr (get-elem "file" i)))
	  (desc  (caddr (get-elem "description" i)))
	  (seeal (get-elems "seealso" i))
	  )
      (when title
	(with-open-file
	    (fp
	     (funcall
	      #'(lambda (x)
		  (setq x
			(map-internal-to-euc
			 (substitute-string x "/" "／")))
		  (concat
		   (with-output-to-string (out)
		     (dotimes (i (length x))
		       (format out "~:@(~X~)" (char-code (character (substring x i (1+ i)))))))
		   ".txt"))
	      title)
	     :direction :output)
	  (when desc
	    (setq desc (substitute-string desc "" ""))
	    (setq desc (substitute-string desc "\n" "\tn")))
	  (let ((k ""))
	    (dolist (l (cdr seeal))
	      (setq k (format nil "~A~A\tn" k (if (car l) (car l) ""))))
	    (if (> (length seeal) 1)
		(setq seeal (substring k 0 -2))
	      (setq seeal ""))
	    )
	  (format fp "~A" (map-internal-to-euc
			   (with-output-to-string (out)
			     (format out "* ~A~%" title)
			     (format out "-タイトル: ~A~%" title)
			     (format out "-タイプ: ~A~%" (if type type ""))
			     (format out "-引数: ~A~%" (if arg arg ""))
			     (format out "-パッケージ: ~A~%" (if pack pack ""))
			     (format out "-リンク: ~A~%" (if link link ""))
			     (format out "-分類: ~A~%" (if sect sect ""))
			     (format out "-ファイル: ~A~%" (if file file ""))
			     (format out "~%")
			     (format out "** 説明~%")
			     (format out "#memo(~A)~%" (if desc desc ""))
			     (format out "** 参考~%")
			     (format out "#memo(~A)~%" (if seeal seeal ""))
			     (format out "----~%")
			     (format out "#pcomment(comment/~A,5,replay,below)" title))))
	  )
	)
      )
    )
  )
|#
;html出力用関数

; 目次の別名兼順番
(defvar INDEX_NAME_LIST
  '(("データ型" . "datatypes")
    ("変数と定数" . "variables")
    ("制御構造" . "program")
    ("パッケージ" . "packages")
    ("関数" . "function")
    ("マクロ" . "macro")
    ("シンボル" . "symbols")
    ("数値" . "numbers")
    ("文字" . "characters")
    ("文字列" . "string")
    ("シーケンス" . "sequence")
    ("リスト" . "list")
    ("ハッシュ" . "hash")
    ("配列" . "array") 
    ("チャンク" . "chunk")
    ("評価" . "evaluation")
    ("入出力" . "io")
    ("ファイルシステム" . "filesystem")
    ("エラー" . "errors")
    ("ウィンドウ" . "window")
    ("バッファ" . "buffer")
    ("ミニバッファ" . "minibuffer")
    ("リージョン" . "region")
    ("モード" . "mode")
    ("シンタックス" . "syntax")
    ("キーマップ" . "keymap")
    ("テキスト" . "text")
    ("検索・正規表現" . "search")
    ("ダイアログ" . "dialog")
    ("日付・時間" . "time")
    ("メニュー" . "menu")
    ("ファイラー" . "filer")
    ("ポジション" . "position")
    ("プロセス" . "process")
    ("システム" . "system")
    ("その他" . "misc")
    ("未分類" . "other")))

(defvar $use_frame t)
(defvar $html_title "xyzzy Reference")

(defvar $HTML_CONTENTS "contents.html")
(defvar $HTML_INDEX "allindex.html")
(defvar $HTML_FRAME "index.html")
(defvar $HTML_INTRO "intro.html")
(defvar $HTML_TIPS "tips.html")

(defvar $HTML_DIR "html")

; Frame name
(defvar $WINDOW_LEFT)
(defvar $WINDOW_RIGHT)

(defun report(str)
  (message str))

;=====================================#
; URL encode
;=====================================#
(defun en_url(url)
  (setq url (map-internal-to-utf-8 url))
  (let (c
	cc
	(neurl ""))
    (dotimes (i (length url))
      (setq c (substring url i (1+ i)))
      (setq cc (char-code (char c 0)))
      (setq neurl
	    (if (string-match "[ 0-9a-zA-Z.~:;()\/\-]" c)
		(concat neurl c)
	      (if (<  cc 255)
		  (format nil "~A~:@(%~2,'0X~)" neurl cc)
		(format nil "~A~:@(%~2,'0X%~2,'0X~)"
			neurl (truncate cc 256) (mod cc 256))))))
    ;  $url =~ tr/ /+/;
    neurl))

;=====================================#
; ファイル出力
;=====================================#
(defun write_file (data file)
  (with-open-file (out file :direction :output)
    (format out "~A" data)))
;=====================================#
; 変換日
;=====================================#
(defun html-timestamp ()
  (format-date-string "<div class=\"footer\">Converted by xml2xxx.l at %y/%m/%d %H:%M:%S </div>\n"))

;=====================================;
; HTML Header
;=====================================;


(defun html-header (title)
  "通常版header"
  (format nil 
	  "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">
<html lang=\"ja\"><head>
<meta http-equiv=\"Content-Type\" content=\"text/html; charset=Shift_JIS\">
<meta http-equiv=\"Content-Style-Type\" content=\"text/css\">
<link href=\"reference.css\" rel=\"stylesheet\" type=\"text/css\">
<title>~A</title>
</head>
" title))


(defun html-fheader (title)
  "フレーム用header"
  (format nil
	  "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\">
<html lang=\"ja\"><head>
<meta http-equiv=\"Content-Type\" content=\"text/html; charset=Shift_JIS\">
<meta http-equiv=\"Content-Style-Type\" content=\"text/css\">
<link href=\"reference.css\" rel=\"stylesheet\" type=\"text/css\">
<title>~A</title>
</head>" title))


;=====================================;
; 目次の作成
;=====================================;
(defun make_index (title contents)
  ;&report( sprintf( "creating %s ... ", $file), 1);
  (write_file
   (with-output-to-string (out)
     (format out
	     (concat (html-header title)
		     "<body>\n"
		     ;"<a name=\"top\"></a>\n"
		     "<span class=\"menu\">\n"))
     (format out "[ <a href=\"~A\" target=\"~A\">Intro</a>\n" $HTML_INTRO $WINDOW_RIGHT)
     (format out " | 目次\n")
     (format out " | <a href=\"~A\" target=\"~A\">索引</a>\n" $HTML_INDEX $WINDOW_LEFT)
     (format out " | <a href=\"~A\" target=\"~A\">目的別</a> ]\n" $HTML_TIPS $WINDOW_LEFT)
     (format out "</span>\n")
     
     ; 総合目次
     (format out "<h2>目次</h2>\n")
     (format out "<ul>\n")
     (dolist (key INDEX_NAME_LIST)
       (format out "<li><a href=\"~A#~A\">~A</a> (~D)</li>\n"
	       (section_index_file_name (cdr key)) (cdr key) (car key)
	       (length (cddr  (assoc (car key) (section-set) :test #'string-equal)))
	       ))
     (format out
	     (concat "</ul>\n"
		     "<hr>\n"
		     "</body>\n</html>\n"))
     )
   contents
   )
  (report "done.\n")
  )

;=====================================#
; セクション毎の目次の作成
;=====================================#
(defun make_section_index()
  (dolist (key INDEX_NAME_LIST)
    ;&report( sprintf( "creating %s ... ", $file), 1);
    (write_file
     (with-output-to-string (out)
       (format out (html-header (car key)))
       (format out "<body>\n")
       (format out "<a name=\"~A\"></a>\n" (cdr key))
       (format out "<span class=\"menu\">\n")
       
       (format out "[ <a href=\"~A\" target=\"~A\">Intro</a>\n" $HTML_INTRO $WINDOW_RIGHT)
       (format out " | <a href=\"~A\" target=\"~A\">目次</a>\n" $HTML_CONTENTS $WINDOW_LEFT)
       (format out " | <a href=\"~A\" target=\"~A\">索引</a>\n" $HTML_INDEX $WINDOW_LEFT)
       (format out " | <a href=\"~A\" target=\"~A\">目的別</a> ]\n" $HTML_TIPS $WINDOW_LEFT)
       (format out "</span>\n")

       (format out "<h3><a href=\"~A\" target=\"~A\">~A</a></h3>\n"
	       (section_file_name (car key)) $WINDOW_RIGHT (car key))
       (format out "<ul>\n")
       (dolist (i (cdr (assoc (car key) (section-set) :test #'string-equal)))
	 (when i
	   (format out "<li><a href=\"~A#~A\" target=\"~A\">~A</a></li>\n"
		   (section_file_name (car key))
		   (en_url (caadr (get-elems "title" i))) $WINDOW_RIGHT (caadr (get-elems "title" i)))))
       (format out (concat "</ul>\n"
			   "<hr>\n"
			   "</body>\n</html>\n"))
       )
     (section_index_file_name (car key)))
    ;&report( "done.\n");
    )
  )
;=====================================#
; 目的別索引
;=====================================#
(defun  make_tips_index (file)
  ;&report( sprintf( "creating %s ... ", $file), 1);
  (write_file
   (with-output-to-string (out)
     (format out (concat (html-header "目的別索引")
			 "<body>\n"
			 ;#$out .= "<a name=\"top\"></a>\n";
			 "<span class=\"menu\">\n"))
     (format out "[ <a href=\"~A\" target=\"~A\">Intro</a>\n" $HTML_INTRO $WINDOW_RIGHT)
     ;#$out .= sprintf " | <a href=\"%s#top\" target=\"%s\">目次</a>\n", $HTML_CONTENTS, $WINDOW_LEFT;
     (format out " | <a href=\"~A\" target=\"~A\">目次</a>\n" $HTML_CONTENTS $WINDOW_LEFT)
     (format out " | <a href=\"~A\" target=\"~A\">索引</a>\n" $HTML_INDEX $WINDOW_LEFT)
     (format out (concat " | 目的別 ]\n"
			 "</span>\n"
			 "<h2>目的別索引</h2>\n"))
     (dolist (i (elem-list "section" (cdr (assoc "Tips" (type-set) :test #'string-equal))))
       (format out "<h4><a href=\"~A\" target=\"~A\">~A</a></h4>\n"
	       (section_file_name i) $WINDOW_RIGHT i)
       (format out "<ul>\n")
       (dolist (j (cdr (assoc "Tips" (type-set) :test #'string-equal)))
	 (when (string-equal (caadr(get-elems "section" j )) i)
	   (format out "<li><a href=\"~A#~A\" target=\"~A\">~A</a></li>\n"
		   (section_file_name i)
		   (en_url (caadr (get-elems "title" j)))
		   $WINDOW_RIGHT
		   (caadr (get-elems "title" j))
		   )))
       (format out "</ul>\n")))
   file)
  ;&report( "done.\n");
  )

;=====================================#
; セクションファイル名
;=====================================#
(defun section_file_name (sect)
  (format nil "~A.html"
	  (or (cdr (assoc sect INDEX_NAME_LIST :test #'string-equal))
	      sect)))


;=====================================#
; セクション目次ファイル名
;=====================================#
(defun section_index_file_name (sect)
  (format nil "~A-index.html"
	  (or (cdr (assoc sect INDEX_NAME_LIST :test #'string-equal))
	      sect)))

;=====================================#
; 各説明
;=====================================#
(defun make_section_string ($val)
  (let ($v ($key (caddr (get-elem "title" $val))))
    (with-output-to-string ($out)
      (format $out "<a name=\"~A\"></a>\n" (en_url $key))
      (format $out "<hr>\n")
      (format $out "<h3>~A</h3>\n" $key)
      (dolist ($k  '("Type" "Arguments" "Package" "File"))
	(setq $v (caddr (get-elem $k (cadr (xml)))))
	(when $v
	  (format $out "<span class=\"element\">~A</span>: <span class=\"pcdata\">~A</span><br>\n" $k $v)
	  ))
      ; Description
      (let ((des (caddr (get-elem "description" $val))))
	(format $out "<br>\n<pre>~A</pre>\n<br>\n"
		(progn
		  (when (null des)
		    (setq des ""))
		  (if (string-match "" des)
		    (format nil "~%~A"
			    (substitute-string des  "" ""))
		    des))))
      ; See Also
      (let ($section
	    ($temp "")
	    ($seealso (cadr (get-elems "seealso" $val))))
	(if $seealso
	    (dolist ($s $seealso)
	      (setq $section
		    (caddr (get-elem "section" (dolist (i (xml))
						 (when (string= (caddr (get-elem "title" i)) $s)
						   (return i))))))
	      (unless (string= $temp "")
		(setq $temp (format nil "~A, " $temp)))
		
	      (setq $temp
		    (if $section
			(format nil "~A<a href=\"~A#~A\">~A</a>" $temp (section_file_name $section) (en_url $s) $s)
		      (format nil "~A~A" $temp $s)))
	      
	      (format $out "<span class=\"element\">~A</span>: <span class=\"seealso\">~A</span><br>\n" "SeeAlso" $temp)
	      )))
      ; Link
      (let (($link (cadr (get-elems "link" $val))))
	(if $link
	    (dolist ($href $link)
	      (format $out "<span class=\"element\">~A</span>: <a href=\"~A\" target=\"link\">~A</a><br>\n" "Link" $href $href)
	      )))

      ; Section
      (let (($section (caddr (get-elem "section"  $val))))
	(format $out "<br>\n")
	(format $out "<span class=\"menu\">\n")
	(format $out "[ <a href=\"~A\" target=\"~A\">Intro</a>\n" $HTML_INTRO $WINDOW_RIGHT)
	;#$out .= sprintf " | <a href=\"%s#top\" target=\"%s\">目次</a>\n" $HTML_CONTENTS $WINDOW_LEFT;
	(format $out " | <a href=\"~A\" target=\"~A\">目次</a>\n" $HTML_CONTENTS $WINDOW_LEFT)
	(format $out " | <a href=\"~A\" target=\"~A\">索引</a>\n" $HTML_INDEX $WINDOW_LEFT)
	(format $out " | <a href=\"~A\" target=\"~A\">目的別</a>\n" $HTML_TIPS $WINDOW_LEFT)
	(when $section
	  ;#$out .= sprintf "[<a href=\"%s#%s\" target=\"%s\">%s</a>]\n" $HTML_CONTENTS, $INDEX_NAME_LIST{$section}, $WINDOW_LEFT, $section;
	  (format $out " | <a href=\"~A\" target=\"~A\">~A</a>\n" (section_index_file_name $section) $WINDOW_LEFT $section)
	  )
	(format $out " ]\n")
	(format $out "</span>\n")
	)
      )))

;=====================================#
; 各リファレンスの作成
;=====================================#
(defun make_nodes ()

  ; 全出力
  (dolist (sect INDEX_NAME_LIST)
    (let*
	(($sect (car sect))
	 ($file (section_file_name $sect))
	 )
      (write_file
       (with-output-to-string ($out)
	 (report (format nil "creating ~A ... " $file))
	 (format $out(html-header $sect))
	 (format $out  "<body>\n")
	 (format $out  "<h2>~A</h2>\n" $sect)
	 
	 (dolist ($key (cdr (assoc $sect (section-set) :test #'string=)))
	   (when $key
	     (format $out "~A" (make_section_string $key))
	     ))
	 (format $out "<hr>\n")
	 (format $out "</body>\n</html>\n")
	 )
       $file))
    (report "done.\n")
    ))
;=====================================;
; 全索引の作成
;=====================================;
(defun make_node ($html_title $file)
  (report (format nil "creating ~A ... " $file))
  (write_file
   (with-output-to-string ($out)
     (format $out (html-header $html_title))
     (format $out "<body>\n")
     ;#$out .= "<a name=\"top\"></a>\n";
     (format $out "<span class=\"menu\">\n")
     (format $out "[ <a href=\"~A\" target=\"~A\">Intro</a>\n" $HTML_INTRO $WINDOW_RIGHT)
     ;#$out .= sprintf " | <a href=\"%s#top\" target=\"%s\">目次</a>\n", $HTML_CONTENTS, $WINDOW_LEFT;
     (format $out " | <a href=\"~A\" target=\"~A\">目次</a>\n" $HTML_CONTENTS $WINDOW_LEFT)
     (format $out " | 索引\n")
     (format $out " | <a href=\"~A\" target=\"~A\">目的別</a> ]\n" $HTML_TIPS $WINDOW_LEFT)
     (format $out "</span>\n")
     
     (format $out "<h2>索引</h2>\n")
     
     (format $out "<ul>\n")
     
     ; 全出力
     (dolist (i (xml))
       (if (caddr (get-elem "section" i))
	   (format  $out "<li><a href=\"~A.html#~A\" target=\"~A\">~A</a></li>\n"
		    (cdr (assoc (caadr (get-elems "section" i)) INDEX_NAME_LIST :test #'string=))
		    (en_url (caddr(get-elem "title" i)))
		    $WINDOW_RIGHT
		    (caddr(get-elem "title" i)))
	 (format $out "<li>~A</li>" (caddr(get-elem "title" i)))
	 ))
     (format $out "</ul>\n<hr>\n")
     (format $out "</body>\n</html>\n")
     )
   $file)
  
  (report "done.\n")
  )

;=====================================#
; フレームの作成
;=====================================#
(defun make_frame ($html_title $file)
  (report  (format nil "creating ~A ... " $file))
  (write_file
   (with-output-to-string ($out)
     (if $use_frame
	 (progn
	   (format $out (html-fheader $html_title))
	   (format $out "<!--#exec cmd=\"../../../rcnt.rb xmldoc.html\"-->\n")
	   (format $out "<frameset title=\"reference\" cols=\"30%,*\">\n")
	   (format $out "  <frame title=\"contents\" src=\"~A\" name=\"~A\">\n" $HTML_CONTENTS $WINDOW_LEFT)
	   (format $out "  <frame title=\"body\" src=\"~A\" name=\"~A\">\n" $HTML_INTRO $WINDOW_RIGHT )
	   (format $out "<noframes>\n")
	   (format $out "<body>\n")
	   (format $out "<ul>\n")
	   (format $out "  <li><a href=\"~A\">目次</a></li>\n" $HTML_CONTENTS)
	   (format $out "  <li><a href=\"~A\">索引</a></li>\n"  $HTML_INDEX)
	   (format $out "  <li><a href=\"~A\">目的別</a></li>"  $HTML_TIPS)
	   (format $out "</ul>\n")
	   (format $out "</body>\n")
	   (format $out "</noframes>\n")
	   (format $out "</frameset>\n"))
	   
       (progn
	 (format $out (header $html_title))
	 (format $out "<body>\n")
	 (format $out "<h1>~A</h1>\n" $html_title)
	 (format $out "<ul>\n")
	 (format $out "  <li><span class=\"index-intro\"><a href=\\"~A\\">Intro</a></span></li>\n" $HTML_INTRO)
	 (format $out "</ul>\n")
	 (format $out "<hr>\n")
	 (format $out (html-timestamp))
	 (format $out "</body>\n")
	 ))
       (format $out "</html>\n")
     ) $file)
   (report "done.\n")
   )

(defun make_intro ($html_title $file)
  (report (format nil "creating ~A ... " $file))
  (write_file
   (with-output-to-string ($out)
     (format $out "~A" (html-header "Introduction"))
     (format $out "<body>\n")
     (format $out "<h1>~A</h1>\n<ul>\n" $html_title)
     (if $use_frame
	 (progn
	   (format $out "  <li><a href=\"~A\" target=\"~A\">目次</a></li>" $HTML_CONTENTS $WINDOW_LEFT)
	   (format $out "  <li><a href=\"~A\" target=\"~A\">索引</a></li>" $HTML_INDEX $WINDOW_LEFT)
	   (format $out "  <li><a href=\"~A\" target=\"~A\">目的別索引</a></li>" $HTML_TIPS $WINDOW_LEFT)
	   (format $out "  <li><a href=\"~A\" target=\"_top\">フレーム</a></li>" $HTML_FRAME))
       (progn
	 (format $out "  <li><a href=\"~A\">目次</a></li>" $HTML_CONTENTS)
	 (format $out "  <li><a href=\"~A\">索引</a></li>" $HTML_INDEX)
	 (format $out "  <li><a href=\"~A\">目的別索引</a></li>" $HTML_TIPS)
	 ))
     (format $out "</ul><hr>\n")
     (format $out "~A" (html-timestamp))
     (format $out "</body></html>\n")
     )
   $file)
  (report "done.\n"))
;=====================================;
; 状況出力
;=====================================;
(defun xml2html ()
  "to html"
  (let ((dd (default-directory)))
    (unwind-protect
	(progn
	  (if $use_frame
	      (progn
		(report "working with frame option.\n")
		(setq $WINDOW_LEFT "left")
		(setq $WINDOW_RIGHT  "right"))
	    (progn
	      (report "working without frame option.\n")
	      (setq $WINDOW_LEFT  "_self")
	      (setq $WINDOW_RIGHT  "_self")))
	  (create-directory $HTML_DIR :if-exists :skip)
	  (set-default-directory $HTML_DIR)
	  (report "chdir $HTML_DIR\n")
	  ;contents.html
	  (make_index $html_title $HTML_CONTENTS)
	  ;*-index.html
	  (make_section_index)
	  ;all-index.html
	  (make_node $html_title $HTML_INDEX)
	  ;本文
	  ;(make_nodes)
	  ;index.html
	  (make_frame $html_title $HTML_FRAME)
	  ;intro,tips
	  (make_intro $html_title $HTML_INTRO)
	  (make_tips_index $HTML_TIPS)
	  ;知らないものはいらない。
	  ;(check_section %INDEX_NAME_LIST \%sects)
	  )
      (set-default-directory dd))
    )
  )
