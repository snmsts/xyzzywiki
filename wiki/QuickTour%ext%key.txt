#freeze
*自分の好きなキーバインドにする [#ca5a87e7]

**前口上 [#n17245d0]

結構キーバインドの話って奥深くてよく分からないところが多いんですけれど、下のようにまとめて見ました。何か他にも付け足すのかもしれませんが……。

#contents

**基本的な話を少し [#a1a1fa61]
***「Ctrl」や「メタキー」の位置自体を変更したい。あるいは「無変換」等のキーに関数を割り当てたい [#c8aec725]

まずは、Ctrlや、無変換キーの位置自体を変更するにはどうしたら良いでしょう？実は、これらのキーはxyzzyでは変更する事はできません。実はxyzzy側では変更できないキーがあります。これらを変更したい時には、別のソフトを使うようにしてください。同様に、ある一部の特殊なキーにも関数を割り当てられず、カスタマイズができません。例えば、無変換キーとかですね。xyzzyがどのキーを使えるのかについてはヘルプ（？）→最近入力したキー（L）を見てください。xyzzyが認識しているキーはこのバッファに表示されます。（つまり、上の説明と絡めれば、xyzzyがそれらのキーを認識していないから、変更が行えないわけです）

#br
#br

CENTER:''ヘルプ（？）→最近入力したキー（L）''
CENTER:#ref(01.png,center,50%)
CENTER:#img(,clear)
CENTER:&size(10){入力したキーが表示されます。入力したのに表示されていない時には、xyzzyが認識していないキーのようです。};

#br
#br

単純にCtrlの位置をAの隣にしたい場合には、[[ChangeKey:http://satoshi.web5.jp/f_soft/dw_win.htm]]とかのレジストリを変更するソフトを使用すれば大丈夫だと思います。逆に、xyzzyではCtrlはAの隣にしたいけど、他のソフトでは変更したくないとか、高度なキーバインドの変更をしたい場合には、（おそらく）[[窓使いの憂鬱:http://mayu.sourceforge.net/]]とかを利用すると良いかもしれません。

***xyzzyで使えるキーはなに？ [#m66a4619]

これについては作者の亀井さんがML（No.127）にて説明されています。少し違う形になりますが、[[refwiki:キー表現使用可能文字]]からも参照できます。

基本的に、C-、M-、C-M-系の場合、アルファベット（大文字・小文字はそれぞれ別のものとされる）と数字が使えるようです。他にも色々ありますが、亀井さんの説明を見た方が早いと思いますので参照してください。

***今のキー割り当てがどうなっているのかを調べる [#x63da54b]

現在のモードのキー割り当てを調べるのは以下の方法があります。

+ 一覧を見たい時には、ヘルプ（？）→キー割り当て一覧（K）を見る
+ あるキー（だけ）を知りたい時には、M-x describe-keyや、M-x describe-key-brieflyを使う

キー割り当て一覧はそのままです。 describe-keyの方は入力すると、ミニバッファに、

 Describe key:

と表示されるので調べたいキーを入力します。M-x describe-key-brieflyは、新たにバッファが分割されずにステータスバーに結果が表示されます。例えば、 C-aを入力してみた結果は以下のようになりました。

 C-a runs the command beginning-of-line    ←M-x describe-keyの場合
 C-a                  beginning-of-line    ←「キー割り当て一覧」から見てみるとこんな感じに書かれている

この場合、 C-aにはbeginning-of-lineという関数が割り当てられています。

何も割り当てられていない場合には、ステータスバーに以下のように表示されます。


#br
#br

CENTER:''割り当てられていない場合''
CENTER:#ref(02.png,center,100%)
CENTER:#img(,clear)
CENTER:&size(10){C-9は何も割り当てられていませんよね。};

#br
#br

また、キー割り当て一覧も同様に、何も割り当てられていない時には何も表示されません。

***キーマップってなあに [#b848d860]

xyzzyではモード毎に同じキーバインドでも違う動作をしますよね。例えば、text-modeでは改行されると（普通に）次の行の先頭にキャレットが移動しますが、c-modeやjava-modeなどのプログラミング言語系の場合、 {等の特定の文字の後には改行後にインデントしてくれたりしますよね。

上記のように、同じキーバインドでもモード毎に異なる動作ができるようにするために、xyzzyには キーマップという概念があります。〜〜〜-mode-mapとか、（モードでは無い場合には〜〜〜-mapとか）という名前です。

例えば、c-modeの場合には、

 *c-mode-map*

と言う名前です。java-modeならば、

 *java-mode-map*

です。モード系のマップ以外には、インクリメンタルサーチを行うときに使うisearchには *isearch-map*が用意されていますし、C-xの割り当てはctl-x-mapが用意されています。((esc-mapってのもあるし他にもいろいろあるみたい。))

なんか *（アスタリスクとかスターと呼ばれるみたい）が付いていたり、付いていなかったりしますが、あまり気にしないで下さい。

**実践編 [#e555969f]

では実際に変更してみた例を説明していきます。

***あるキーに関数を割り当てる [#be529063]

あるキーである関数を実行したい時です。キーマップを使用すれば、モード毎や、ある状態だけに限定する事もできますが、とりあえず動いてくれればかまわない人はglobal-set-keyを使うと楽かもしれません。

***どんなモードでも割り当てる [#c327c7db]

どんなモードであろうと関数を割り当てたい場合には、

 ;;C-→に「next-buffer」という関数（機能）を割り当てる
 (global-set-key #\C-Right 'next-buffer)
 ;;M-aに「selection-whole-buffer」という関数（機能）を割り当てる
 (global-set-key #\M-a 'selection-whole-buffer)

のようにします。上の場合、 C-→（矢印キー）で次のバッファに移動します。M-aでバッファの文字全体を選択します。（いわゆるMicorsoft WordとかのC-a「全てを選択」とおんなじ）

C-x C-a C-bのように2ストロークキー以上に割り当てたい場合には、

 ;;C-x C-a C-bでnext-bufferを実行
 (global-set-key '(#\C-x #\C-a #\C-b) 'next-buffer)
 ;;C-x a a a でselection-whole-bufferを実行
 (global-set-key '(#\C-x #\a #\a #\a) 'selection-whole-buffer)

のようにします。下の例は、 C-x a a aで、selection-whole-bufferが実行されます。

ただし、この global-set-keyは、モード毎に割り当てられたキーバインドがあった場合には、そっちを優先してしまうので、注意してください。なるべく割り当てられてなさそうなキーバインドを指定しておきましょう。そうしないと、モードによってはそのモード特有のキーバインドとバッティングしてしまってうまく機能しないかもしれません。どんなのが良いのかいまいちわかりませんが、自分の場合、

 ;;●検索ダイアログ[C-M-F]
 (global-set-key #\C-\M-f 'search-dialog)
 
 ;;●置換ダイアログ[C-M-R]
 (global-set-key #\C-\M-r 'replace-dialog)
 
 ;;●Grepダイアログ[C-M-G]
 (global-set-key #\C-\M-g 'grep-dialog)

のように、メタキー（Alt）とCtrlを同時押しするキーバインドにglobal-set-keyを使用しています。あまり同時押しするものに関数が割り当てられているモードは無いと思うので……。

***あるモードだけキーを割り当てる [#t3554318]

あるモードだけの場合には、 define-keyを使用します。例えばc-modeを例に取ると、

 (define-key ed::*c-mode-map* '(#\C-c #\C-f) 'next-line)

と書けば、 C-c C-fでnext-lineが実行されます。

**TabキーでTAB文字を入れる [#q0a15199]

FAQみたいなので載せておきます。

***特定のモードのみの場合 [#b70fd7d6]

c-modeやjava-modeでTABキーを押しても、（text-modeとかのように）Tabは入りません。それじゃやだっ!!って人は、

 (define-key ed::*c-mode-map* #\tab 'self-insert-command) 

と書いておくと良いようです。*c-mode-map*の先頭に ed::が付いていますが、これはパッケージと言う物で、Lispの変数が（名前空間上で）バッティングしないようにしておく仕組みです。ここでは深入りないでさらりと流しておきます(^^;;

おそらく、xyzzyと一緒に入っている（メジャー）モードは同じように先頭に ed::を付けるような気がします。（ホントはモード毎に違います。例えばc-modeの場合、c-mode.lの8行目に(in-package "editor")と書かれています。c-modeのキーマップを変更するならば、"editor"の部分を書いておけばオッケーです。つまりeditor::と。 ed::はそのパッケージの短縮形の呼び出しです。）

***全てのモードでTabを入れたい [#a6da758d]

MLにありました。7398番目です。

 (let ((keymap (make-sparse-keymap)))
   (define-key keymap #\TAB 'self-insert-command)
   (add-hook '*create-buffer-hook*
          #'(lambda (buffer)
                (set-minor-mode-map keymap buffer))))

global-set-keyではうまく動いてくれないみたいです。これは、モードによってはTABキーに異なる機能が割り当てられており、そちらを優先するためのようです。

***TabキーはそうなったけどC-iもそうなったよ？？ [#dc6ede5b]

実は TabキーとC-iはxyzzy上では同じものとして認識されています。したがって、上記のコードを書けば、Tabキーを押したら無論TAB文字が入るようになるわけですが、C-iを押してもTAB文字が入るようになります。他にも幾つか同じとみなされるキーがあるようです。例えば、メタキーはC-[と同じですし、EnterはC-mと同じです。

TabキーとC-iを異なるものとして別の関数を割り当てたいっ!!って人は、以下のようにTabキーを 仮想キーにに割り当ててしまえば解決できます。

 ;;C-F24にnext-bufferを割り当てる
 (global-set-key #\C-F24 'next-buffer)
 ;;TABキーにC-F24を割り当てる（C-iはそのまま）
 (set-extended-key-translate-table exkey-tab #\C-F24)

上記の場合、 C-iはそのままで、TABキーを押した時だけnext-bufferになってくれます。

***割り当てられないキーに割り当てる [#u216e7aa]

上のほうで割り当てられないキーがあると書きましたが、実はその一部のキーも割り当てる事ができます。その一部のキーは BackSpaceとTabとEnterです。これらはそのままでは割り当てできませんが、以下のようにすると割り当てができます。

 ;;Shift-Ctrl-EnterをF23二割り当て
 (set-extended-key-translate-table exkey-S-C-return #\F23)
 ;;F23にprevious-buffer-foldを割り当て
 (global-set-key #\F23 'previous-buffer-fold)

と書けば、 S-C-Enterが押された時にF23という仮想的なキーが押されて、その仮想的なキーのF23がprevious-buffer-foldの関数を実行してくれます。仮想キーはF13からF24まで用意されています。また、仮想的なキー側にもS-やC-を書くことができる（よう）なので、かなり色々変更できます。詳しくはHIEさんのQandAを見てください。

**キー割り当てをはずす [#lffec566]

***globalをはずす [#wbac5aec]

割り当てる事はよくやりますが、はずす事もできます。はずすと、そのキーを押しても何も起こらなくなります。（当たり前だけど）例えば、以下のようにすると、

 (global-unset-key #\C-r)

デフォルトでは、C-rは search-backwardが割り当てられていますが、それが外されます。（M-x describe-keyで調べると、ステータスバー上にnot boundと表示される）

ただし、モードによってはmapに割り当てられている場合もあります。その場合にはそちらが呼び出されるようになっているので、下のようにして特定のモードに対しても外します。

***あるモードだけ外す [#icd9d92c]

globalだけでなく、undefine-keyもあります。こちらを使用すれば、あるモードだけ関数を外す事もできます。（ま、あまり使う事は無いと思いますけれど）

 (undefine-key ed::*html+-mode-map* #\C-h)

のように書けばOKです。何もカスタマイズしていなければ、html+-modeのC-hには、 

 html+-backward-delete-char-untabify-or-selection
 （backward-delete-char-untabify-or-selectionのhtml+-mode版）

が割り当てられていますが、それが外されます。外された結果、global-keymapにC-hが登録されていれば、それを参照します。今回はその結果、C-hはdelete-backward-char-or-selectionとなりました。

外された結果、global-keymapに該当するキーバインドが登録されていない場合には、何も起こらなくなります。

**こんな所かなぁ [#p56afedd]

と思うんですが。他にもいろいろあったら付け足そうかなと思っています。
