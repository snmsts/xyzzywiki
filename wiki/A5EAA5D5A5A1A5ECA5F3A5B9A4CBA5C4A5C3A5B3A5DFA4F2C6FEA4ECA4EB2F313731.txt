* list関連 [#t3cbe779]

-ページ: [[リファレンスにツッコミを入れる]]
-投稿者: 名無しさん
-優先順位: 低
-状態: 完了
-カテゴリー: 新規項目
-投稿日: 2005-11-12 (土) 16:58:50
-バージョン: 

** メッセージ [#ic8cf99a]
list.lの中でまだなさそうなものです。

 <chapter>
 <title>subsetp</title>
 <type>Function</type>
 <arguments>subsetp LIST1 LIST2 &amp;rest REST &amp;key :test :test-not :key</arguments>
 <package>lisp</package>
 <description>
 LIST1 が LIST2 のサブセットなら t、そうでないなら nil を返します。
 
 使用例:
   (subsetp '(1 5 7) '(1 3 5 7 9))
   =&gt; t
   (subsetp '(1 5 8) '(1 3 5 7 9))
   =&gt; nil
 </description>
 <seealso></seealso>
 <link></link>
 <section>リスト</section>
 <file>list.l</file>
 </chapter>

 <chapter>
 <title>nset-exclusive-or</title>
 <type>Function</type>
 <arguments>nset-exclusive-or LIST1 LIST2 &amp;rest REST &amp;key :test :test-not :key</arguments>
 <package>lisp</package>
 <description>
 LIST1 と LIST2 のいずれか一方にのみ含まれる要素のリストを作って返します。
 set-exclusive-or と違い LIST2 は変更されます。
 
 使用例:
   (setq x '(1 3 5 7 9))
   =&gt; (1 3 5 7 9)
   (setq y '(2 3 5 7 11))
   =&gt; (2 3 5 7 11)
   (nset-exclusive-or x y)
   =&gt; (9 1 2 11)
   x
   =&gt; (1 3 5 7 9)
   y
   =&gt; (2 11)
 </description>
 <seealso>set-exclusive-or</seealso>
 <link></link>
 <section>リスト</section>
 <file>list.l</file>
 </chapter>

 <chapter>
 <title>set-exclusive-or</title>
 <type>Function</type>
 <arguments>set-exclusive-or LIST1 LIST2 &amp;rest REST &amp;key :test :test-not :key</arguments>
 <package>lisp</package>
 <description>
 LIST1 と LIST2 のいずれか一方にのみ含まれる要素のリストを作って返します。
 nset-exclusive-or と違い元のリストは変更されません。
 
 使用例:
   (set-exclusive-or '(1 3 5 7 9) '(2 3 5 7 11))
   =&gt; (9 1 11 2)
 </description>
 <seealso>nset-exclusive-or</seealso>
 <link></link>
 <section>リスト</section>
 <file>list.l</file>
 </chapter>

 <chapter>
 <title>nintersection</title>
 <type>Function</type>
 <arguments>nintersection LIST1 LIST2 &amp;rest REST &amp;key :test :test-not :key</arguments>
 <package>lisp</package>
 <description>
 LIST1 と LIST2 の両方に含まれる要素のリストを作って返します。
 intersection と違い LIST1 は変更されます。
 
 使用例:
   (setq x '(1 3 5 7 9))
   =&gt; (1 3 5 7 9)
   (setq y '(2 3 5 7 11))
   =&gt; (2 3 5 7 11)
   (nintersection x y)
   =&gt; (3 5 7)
   x
   =&gt; (1 3 5 7)
   y
   =&gt; (2 3 5 7 11)
 </description>
 <seealso>intersection</seealso>
 <link></link>
 <section>リスト</section>
 <file>list.l</file>
 </chapter>

 <chapter>
 <title>intersection</title>
 <type>Function</type>
 <arguments>intersection LIST1 LIST2 &amp;rest REST &amp;key :test :test-not :key</arguments>
 <package>lisp</package>
 <description>
 LIST1 と LIST2 の両方に含まれる要素のリストを作って返します。
 nintersection と違い元のリストは変更されません。
 
 使用例:
   (intersection '(1 3 5 7 9) '(2 3 5 7 11))
   =&gt; (7 5 3)
 </description>
 <seealso>nintersection</seealso>
 <link></link>
 <section>リスト</section>
 <file>list.l</file>
 </chapter>

 <chapter>
 <title>nunion</title>
 <type>Function</type>
 <arguments>nunion LIST1 LIST2 &amp;rest REST &amp;key :test :test-not :key</arguments>
 <package>lisp</package>
 <description>
 LIST1 と LIST2 を併せたリストを作って返します。
 union と違い LIST1 は変更されます。
 
 使用例:
   (setq x '(1 3 5 7 9))
   =&gt; (1 3 5 7 9)
   (setq y '(2 3 5 7 11))
   =&gt; (2 3 5 7 11)
   (nunion x y)
   =&gt; (1 9 2 3 5 7 11)
   x
   =&gt; (1 9 2 3 5 7 11)
   y
   =&gt; (2 3 5 7 11)
 </description>
 <seealso>union</seealso>
 <link></link>
 <section>リスト</section>
 <file>list.l</file>
 </chapter>

 <chapter>
 <title>union</title>
 <type>Function</type>
 <arguments>union LIST1 LIST2 &amp;rest REST &amp;key :test :test-not :key</arguments>
 <package>lisp</package>
 <description>
 LIST1 と LIST2 を併せたリストを作って返します。
 nunion と違い元のリストは変更されません。
 
 使用例:
   (union '(1 3 5 7 9) '(2 3 5 7 11))
   =&gt; (1 9 2 3 5 7 11)
 </description>
 <seealso>merge</seealso>
 <seealso>nunion</seealso>
 <link></link>
 <section>リスト</section>
 <file>list.l</file>
 </chapter>

 <chapter>
 <title>ldiff</title>
 <type>Function</type>
 <arguments>ldiff LIST OBJECT</arguments>
 <package>lisp</package>
 <description>
 OBJECT が LIST の一部であるなら、LIST から OBJECT の部分を除いたリストを返します。
 
 LIST の一部分であるかどうかの判定は eq で行います。
 OBJECT が LIST の tailp であれば LIST の一部であるとみなされるとも言えます。
 
 使用例:
   (setq x '(a b c d e))
   =&gt; (a b c d e)
   (setq y (cddr x))
   =&gt; (c d e)
   (ldiff x y)
   =&gt; (a b)
   ;; 見た目は同じでも x の一部分でないならダメ
   (ldiff x '(c d e))
   =&gt; (a b c d e)
 </description>
 <seealso>tailp</seealso>
 <link></link>
 <section>リスト</section>
 <file>list.l</file>
 </chapter>

 <chapter>
 <title>nset-difference</title>
 <type>Function</type>
 <arguments>nset-difference LIST1 LIST2 &amp;rest REST &amp;key :test :test-not :key</arguments>
 <package>lisp</package>
 <description>
 LIST1 から LIST2 にも含まれる要素を除き、そのリストを返します。
 set-difference と違い LIST1 は変更されます。
 
 使用例:
   (setq x '(1 3 5 7 9))
   =&gt; (1 3 5 7 9)
   (setq y '(2 3 7))
   =&gt; (2 3 7)
   (nset-difference x y)
   =&gt; (1 5 9)
   x
   =&gt; (1 5 9)
 </description>
 <seealso>set-difference</seealso>
 <link></link>
 <section>リスト</section>
 <file>list.l</file>
 </chapter>
--------
- どーもです。破壊的修正に関する表現には思うことがあるので、別ページで。 -- [[NANRI]] &new{2005-11-13 (日) 21:27:50};
- 取り込みました。 -- [[NANRI]] &new{2005-12-12 (月) 02:31:58};

#comment
