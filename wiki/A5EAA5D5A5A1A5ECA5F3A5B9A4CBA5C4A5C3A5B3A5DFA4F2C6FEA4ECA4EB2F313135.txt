*【記述形式】<arguments>の書き方 [#hd1a2ad2]

-ページ: [[リファレンスにツッコミを入れる]]
-投稿者: [[NANRI]]
-優先順位: 低
-状態: 完了
-カテゴリー: ツッコミをいれる
-投稿日: 2005-04-25 21:27:27 (月)
-バージョン: 

**メッセージ [#b16eb232]
現在<arguments>の見直し作業中です。
そこで少し疑問点があります。

1点目。
引数無しの関数の場合、「関数名のみを書く」か「何も書かない」か、どちらの方が良いのでしょう。
addrefに合わせて前者かなと自分は思っているのですが。

2点目。
Macroの引数でよく分からない部分があります。
例えばsetfの場合、describe-functionでは「setf &rest ARGS &environment ENV」のように返ってきます。
一方、現在の記述は「{place new-value}*」となっています。
現在の記述はCLtL2を参考にしてあるのだと思うのですが、どちらの記述をするべきでしょうか？
後者の記述の方が分かりやすいのですが、xyzzy lisp の場合もそのまま適用できるのかという所を検証できる自信はありません。
かといって、前者の記述だと分かりづらいんですよね。（&environment って何？って感じです）
よく分からないので触らずに進めていきますが、何かいい指針を思いついた方はお教えください。

----
-1点目については他との整合性があればどちらでもいいんじゃないでしょうか（細かいことを言えば、関数名も含めてしまうと既に arguments じゃない気がしますが）。何も書かない場合代わりに nil にしておくという選択もありかもしれません。 --  &new{2005-04-26 04:59:59 (火)};
-2点目についてですが、複雑なマクロの場合、引数である式の内部構造が往々にして問題になるわけで、その場合引数だけを提示してもあまり有効でない可能性は確かに高いと思います。また、引数式内で構造上意味を持つ場所それぞれについて指し示す名前がないとドキュメントの本文も書き辛いのではないでしょうか。確かに検証がやっかいではあるとは思いますけれども、Common Lisp にあるものについては CLtL2 なり CLHS から引っ張ってきて、あとは突っ込み任せ（ツッコミがないなら問題もないということにしておく）で差し当たっては構わないのでは、と思います。 --  &new{2005-04-26 05:31:08 (火)};
-回答ありがとうございます。 1. typeがFunctionやMacroの場合は<arguments>に記述が欲しいなと考え直しました。nilとか無しとか書くのは少し唐突な印象があるので「関数名のみを書く」の方針にしておこうと思います。 -- [[NANRI]] &new{2005-04-27 00:16:12 (水)};
-2. 納得しました。CLtL2 なり CLHS から引っ張ってくるという方針にしたいと思います。説明を引っ張ってきたマクロはリストアップしておいて確認しやすいようにするということで。「ツッコミ任せ」……素敵な言葉です（＾＾ -- [[NANRI]] &new{2005-04-27 00:21:35 (水)};

- CLtL2の書き方を参考にした、もしくはしたほうがいいかもしれないMacroのリストです。 -- NANRI
-- and
-- case
-- cond
-- decf
-- defpackage
-- defstruct
-- do
-- do*
-- do-all-symbols
-- dolist
-- dotimes
-- incf
-- or
-- pop
-- prog1
-- psetq
-- push
-- pushnew
-- rotatef
-- setf
-- shiftf
-- step
-- unless
-- when
-- lambda
-<arguments>の見直し作業は現在一応終わっているので、状態を着手にしておきます。 -- [[NANRI]] &new{2005-05-21 13:37:46 (土)};

#comment
