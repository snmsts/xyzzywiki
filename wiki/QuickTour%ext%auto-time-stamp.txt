#freeze
#contents

*auto-time-stampを導入しよう [#u35f4aab]

**前口上 [#re18121e]

auto-time-stampとは、自動的にバッファのタイムスタンプを更新してくれる拡張Lispです。タイムスタンプは、メニューのツール（T）→日付と時刻の挿入（M）のダイアログから入れる事ができますが、ファイルの日付を逐一ダイアログからするのは面倒です。保存したと同時にタイムスタンプを更新してくれないかなぁと思っていた矢先にこのauto-time-stamp.lを見つけて幸せになれました。

今回紹介するauto-time-stampを使うと、自分の好きな時刻の表示形式を（その名の通り）半自動的に挿入する事ができるようになります。また、一時的に自動挿入をやめる事もできます。自分の場合にはバッファを保存した時に、セーブした日時を挿入&上書きさせるようにしています。そうする事で、そのファイルがいつ修正されたのかとかがわかるようになり重宝しています。多分以下の人はauto-time-stampを入れるとよいでしょう。

- 日付入りファイルをよく作成する人
- 一々日付を更新するのがめんどうに思っている人（セーブした時に日付を更新させたい人）

では早速入れてみましょう。


**インストール [#s18f28eb]

***NetInstallerを使用する [#h4ac1995]

Netnstallerを使っている人はこっちですると楽かも知れません。

喜多さん自身はNetInstaller対応されていないようですが、[[佐野]]さんがインストール可能にしてくれています。

 http://xyzzy.s53.xrea.com/ni/ni.l

にあるので、aを押してパッケージリストを追加してダウンロードしてください。これで準備は終了ですが、一応[[喜多さんのサイトの説明>http://kitaj.no-ip.com/xyzzy/index.html#auto-time-stamp]]を読んで置いてください。


***圧縮ファイルから手動でインストールする [#he310ca7]

NetInstallerを使用せずにももちろん入れられます。公開されている[[喜多さんのサイト>http://kitaj.no-ip.com/]]から入手可能です。詳しい説明とauto-time-stamp.lがあるので、どちらも見ておきましょう。auto-time-stamp.lは、いつも通りに

 $XYZZY/site-lisp/

のフォルダの中に入れておきます。これで準備は終了です。

**auto-time-stamp.lを使う [#n55d30e7]

ちょっといつもと趣向を変えて、scratchバッファを使ってどんな感じなのかを試してみます。実際に便利に使う方法はこの下に書いてありますのでそっちを見てください。

喜多さんのファイルには詳しい説明とか、使い方が載っていないので、どうやったら使えるのかがいまいち謎ですね。((lispが読めないわたしみたいな人には。))だからと言ってそれで使わないのももったいないので、簡単に（山勘を働かせながら）使う方法を書きます。

*** *scratch*バッファで試してみる [#w5dbc5aa]

以下のLispコードを*scratch*バッファに書いてください。

 ;Last Modified:
 (require "auto-time-stamp")
 (setq ed::*time-stamp-start* "Last Modified:")
 (setq ed::*time-stamp-end* "$")
 (setq ed::*time-stamp-line-limit* 1)
 (setq ed::*time-stamp-format* "%a, %d %b %Y %H:%M:%S %Z")

一行目の;Last Modified:の後ろには、タブやスペースを入れずに、 :の直後で改行してください。これを書いたら、 M-x eval-buffer します。ファイル名を聞かれますけど、そのまま（*scratch*バッファで）Enterを押せばOKです。

そうしたら、 

 M-x save-buffer-with-time-stamp

とします。すると、「ファイル名がありません」というダイアログが出ますが、それを閉じた後にバッファの先頭を見ると、それまでは、

 ;Last Modified:

であったものが、

 ;Last Modified:Fri, 05 Dec 2003 01:31:00 +0900

と、日付が挿入されているはずです。こうなったらちゃんとauto-time-stampが効いています。

**記述した項目の説明 [#ob3360d8]

上に書いたものの意味を説明をしていきます。便宜的に行数を頭に付けてみました。

 1  ;Last Modified:
 2  (require "auto-time-stamp")
 3  (setq ed::*time-stamp-start* "Last Modified:")
 4  (setq ed::*time-stamp-end* "$")
 5  (setq ed::*time-stamp-line-limit* 1)
 6  (setq ed::*time-stamp-format* "%a, %d %b %Y %H:%M:%S %Z")

それぞれの行は下のような意味を持っています。

- 一行目:日時が実際に挿入される行（;はLispのコメント。;が無いと「そんな命令無いよ」とか言われる）
- 二行目:$XYZZY/site-lisp/auto-time-stamp.lのLispファイルの中身を読み込んでいる行
- 三行目:挿入される前の文字列のパターンを指定している行（正規表現を使える）
- 四行目:挿入される後の文字列のパターンを指定している行（正規表現を使える）
- 五行目:バッファの上から何行目までをauto-time-stampの挿入範囲にするかを指定している行
- 六行目:挿入される日時の形式を指定している行

となっています。もう少し詳しく説明すると以下のような感じです。

***一行目 [#le6aa0fb]

実際に日時を挿入する行です。Lispの式として認識されると困るので、頭に;をつけてコメント（実際のプログラムの動作に影響を与えない所）にしています。

***二行目 [#b6cd231d]

 (require "auto-time-stamp")

は、"〜〜〜"という名前でprovideされているファイル((auto-time-stamp.lの最初の方に(provide "auto-time-stamp")と書かれています。これは、このファイルの中身が"auto-time-stamp"であるとxyzzyに知らせている所みたい。))を読み込むために使われます。すでにxyzzyが指定せずとも読み込んでいる（場合もある）けれど、一応書いておきました。

***三行目 [#y265ea7a]

auto-time-stamp.lの中を見てもらえばわかるとおり、*time-stamp-start*という変数があります。（(defvar *〜〜〜〜* 〜〜〜)というのがグローバル関数の宣言です）その*time-stamp-start*と言う変数は日時を付け替える直前の文字列を指定する部分なので、今回は"Last Modified:"の直後に日時を挿入して欲しいので、それを代入しました。（ (setq foo bar )で変数に値を代入できる。変数の頭にed::というのが付いていますけど、それは、 editorパッケージのと言う意味です。つけなくても大丈夫かも）

***四行目 [#le5cd994]

三行目と同様で、日時を挿入する部分の後ろを指定しています。 ''"$"は何だ??''、と思う人がいるかもしれませんけど、これは正規表現の 行末を示すメタキャラクタですね。入力する時に一々 ：の直後で改行してくださいと書いたのはこのためです。 :) もしかしたら正規表現を

 ;半角スペースとTAB文字と全角スペースを対象とする
 [ \t　]+

としたほうがよいかもしれません。

***五行目 [#gfbebdf6]

何行目までをtime-stampの対象とするのかを指定している行です。今回は一行目にあったので、 ''1''にしてみました。

***六行目 [#t03a8767]

挿入される日時の形式を指定しています。色々指定はできるので、 

 $XYZZY/lisp/timestmp.l

を見てください。今回は日付と時刻の挿入（M）から挿入できる物の中の一番上のものと同じです。

***だいたいの説明終わり [#u5d8e130]

だいたいこんな感じだ、というのがわかった（？）と思うので、そしたら、上記のを.xyzzy等に書いておきましょう。すると、バッファ内のマッチしたタイムスタンプを更新してくれるようになります。

具体的には、

 (require "auto-time-stamp")
 ;;マッチさせる行頭の文字列に変更
 (setq ed::*time-stamp-start* "Last Modified:")
 ;;マッチさせる行末の文字列に変更（行末に何も無い場合には変更せずで)
 (setq ed::*time-stamp-end* "$")
 ;;マッチをさせたい行数へ変更（3行目に日付があるなら3、40行目なら40)
 (setq ed::*time-stamp-line-limit* 1)
 ;;入れる日付のフォーマット（詳しくは$XYZZY/lisp/timestmpに)
 (setq ed::*time-stamp-format* "%a, %d %b %Y %H:%M:%S %Z")

という物を書いておけばOKです。そうしたら、日付を更新したいときに、

 M-x save-buffer-with-time-stamp

とすれば、タイムスタンプを更新しながらバッファを保存してくれます。

**もっと便利に使おう [#hf09fc8c]

***保存時にタイムスタンプを更新させる [#v7d07381]

まぁこんな感じに使っていけばよろしいのですが、一々M-x save-buffer-with-time-stampと打つのが大変ですよね。そんな人は、

 (global-set-key (#\C-x #\s) 'save-buffer-with-time-stamp)

とするか、あるいは、XyzzyWikiにある

 (require "auto-time-stamp")
 (add-hook
  '*before-save-buffer-hook*
  #'(lambda ()
      (interactive)
      (and *time-stamp-active*
          (ed::time-stamp)) nil))

を使うと良いと思います。多分下のほうが良いと思います。どちらも.xyzzyやsiteinit.lに書けばOKです。

***一時的にtime-stampをつけない [#z0aef78a]

そのものズバリ''M-x time-stamp-toggle-active''です。トグルしてくれます。

**簡単だけど終了 [#y4eceb98]

したいと思います。
