* append の引数 [#i0c5973d]
-ページ:     [[リファレンスにツッコミを入れる]]
-投稿者:     [[lambda]]
-優先順位:   低
-状態:       着手
-カテゴリー: ツッコミをいれる
-投稿日:     2007-11-11 (日) 02:47:28
-バージョン: 

** メッセージ [#e316f894]
append の「引数は保存されます」とありますが、一番最後に指定したリストはコピーされません(nconc と同じ動き)。
すべてのリストをコピーさせたければ (append x y nil) のようにしないと、append が戻したリストをいじった場合、元のデータが破壊される恐れがあるというような記述を追加したほうがよいと思います。


----
- うーん。その指摘はappendそのものじゃなくて破壊的な関数の使い方を誤っているんじゃないかなーと思った。 -- [[佐野]] &new{2007-11-11 (日) 07:58:29};

-たとえばこういう場合です。
 (setq x '(a b c))
 (setq y '(d e f))
 (setq z1 (append x y nil))
 (setq z2 (append x y))
 
 ;「y」 のデータにあたる部分に代入。
 (setf (nth 4 z1) 1)
 y
 => (d e f)
 (setf (nth 4 z2) 1)
 y
 => (d 1 f)
- そういうのはcopy-treeじゃないのかなーと思ってcltl2を読んでみたらなんかそのままのことが書いてあった -- [[佐野]] &new{2007-11-12 (月) 00:33:53};
- Note that append copies the top-level list structure of each of its arguments except the last. The function concatenate can perform a similar operation, but always copies all its arguments. See also nconc, which is like append but destroys all arguments but the last. -- [[佐野]] &new{2007-11-12 (月) 00:34:00};

はまりどころなんでしょうか…そしてリファレンスに追加するとしたら
 引数は保存されますが、引数の最後の要素は元のリストと共有されます。
くらいでしょうか…
- 「引数は保存される」と「最後の要素は保存される」を逆接でつなぐのは違和感が。 --  &new{2007-11-12 (月) 20:23:35};
- consその他で共有されるのと状況は同じだと思うのですが、但し書きを追加しておきました。 -- [[NANRI]] &new{2010-04-29 (木) 04:17:34};

#comment
