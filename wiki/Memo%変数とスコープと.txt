[[Memo]]

http://raido.sakura.ne.jp/southly/rn/index.rb?1174689340.txt
> 変数の種類
> スペシャル変数
>     * ダイナミックなスコープを持つ
>     * あらゆる環境を超えて一意の値
>     * defvarなど
>     * (declare (special ...)) で局所変数をスペシャル変数に昇格させることもできる
> 
> トップレベル変数
>     * 正しい用語はよく知らないが、とにかくグローバル環境の変数
>     * トップレベルのsetqフォームなど
>     * レキシカルスコープを持つ
>     * グローバル環境に登録されているため、いろんな環境から参照できる
> 
> バッファローカル変数
>     * バッファごとに異なる値を持てる
>     * defvar-local, make-local-variableなど
>     * ダイナミックスコープではない
>     * かといってレキシカルスコープと表現していいものか
>     * とにかくバッファに付属した変数
> 
> 局所変数
>     * いわゆるローカル変数
>     * let, let*, 関数の仮引数など
>     * レキシカルスコープを持つ
>     * 環境ごとに異なる値
----
> let等は局所性の他に
> 
> 環境にない->レキシカル
> スペシャル->スペシャル
> レキシカル->レキシカル
> バッファローカル->レキシカル？
> 
> とかもいりますかね
----
> そういう変数の種類が変化するイメージは無いです。
> letは環境を新たに作るのでシンボルがたまたま同じでも変数としては別物という感じです。-- NANRI
----
http://snmsts.dreamhosters.com/wiki/?%C6%FC%B5%AD%A4%C3%A4%DD%A4%AF%2F2007-03-27#vebb19d3
> 考えてみたけど
> 
> 変数自体はletで違うものになると考えても
> 
> 正しいけどスペシャルであるかどうかということは
> 
> 環境の古いものから引き継ぐと考えないと
> 
> 上手く説明が付かないんじゃないかな…と思った。
> 
 ;トップレベル
 (setq x 1)
 ;実験用関数
 (defun f()
   x)
 ;lexicalな束縛
 ((lambda (x) (f)) 2)
 => 1
 ((lambda (x) (declare (special x)) (f)) 2)
 => 2
 special性がシンボルに付随するパラメータなら
 
 ((lambda (x) (f)) 2)
 => 1
 ここでもスペシャルになってないと困る。
> 
> なんか理解には問題はないんだけど上手く一本通った説明が思いつかないんだよな。
> 
> cltl2だとどこらへんだったっけなぁ。declareあたりの説明をちゃんと読んだ記憶がないし
> 
> そこらへんから読んでくかなぁ。
----
http://raido.sakura.ne.jp/southly/rn/index.rb?1175019510.txt
>     *  ダイナミックスコープってそういうものというか、環境を超える効果を持っているのがスペシャル変数というイメージですね＞「スペシャルであるかどうかということは環境の古いものから引き継ぐ」
> 
 ; トップレベル
 (setq x 1)
 ; 実験用関数
 (defun f()
   x)
 ; lexicalな束縛
 ((lambda (x) (f)) 2)
 => 1
 ; (declare (special x)) によって、この環境ではxがスペシャル変数に昇格
 ((lambda (x) (declare (special x)) (f)) 2)
 => 2
 ; また新しい環境なので通常のlexicalな束縛
 ((lambda (x) (f)) 2)
 => 1
>     * こんな説明でどうでしょう
>     * この状況のポイントは「(declare (special ...))の効果は環境内のみの一時的なもの」という事だと思う。効果が環境内のみの一時的なものだからこそ(declare (special ...))は環境の頭の方と記述する場所が決まっていて、環境の途中で変化するなんてことがない。
----
http://snmsts.dreamhosters.com/wiki/?%C6%FC%B5%AD%A4%C3%A4%DD%A4%AF%2F2007-03-28#eb939c03
> さらに
> 
 ((lambda (x) (declare (special x)) (shadow 'x)(f)) 2)
 =>2
> 
> まぁこんなもんか。シンボルがキーになってるよね。と。
> 
> buffer-local変数はなんとなくトップレベル変数的に思える。
> 
 (symbol-value 'mode-name)
 => "Lisp Interaction"
> 
> よしよし。処理は見ていないけど普通のlispで実現するにはset-buffer内でsetを使えば宜しい…と
> 
> スコープの話は別でってのは納得できます。混ぜちゃいかんかったらすみません。
----
http://snmsts.dreamhosters.com/wiki/?%C6%FC%B5%AD%A4%C3%A4%DD%A4%AF%2F2007-03-29#v54e99a4
> shadow
> 
> 確かに意図したものと違うなぁ。勘違いです。
> 
> シンボルと変数の関係を断つものだという認識で使ってました。
> 
> 全てをimportした別パッケージで使っているぶんにはその認識でも困らなかったのでした。
> 
 (setq x 1) 
 (defun f()x)
 (defun g(x) (unintern 'x)(f))
 ((lambda (x) (declare (special x)) (g 3)) 2)
> 
> というわけで訂正。挙動的にもこれは意味あるかなぁ。
----
http://raido.sakura.ne.jp/southly/rn/index.rb?1175139948.txt
>     *  shadowの件は納得です。ただ、unintern より makunbound の方がより直接的な気がします。
>     * ということで実験。
> 
 ; 普通の状況
 (progn
   (setq x 1)
   (defun f() x)
   ((lambda (x) (f)) 2))
 =>1
 
 
 ; スペシャル変数に昇格
 (progn
   (setq x 1)
   (defun f() x)
   ((lambda (x) (declare (special x)) (f)) 2))
 =>2
 
 
 ; 束縛を解消
 (progn
   (setq x 1)
   (defun f() x)
   ((lambda (x) (declare (special x)) (makunbound 'x) (f)) 2))
 ->変数が定義されていません: x
 
 
 ; 束縛を解消その二
 (progn
   (setq x 1)
   (defun f() x)
   (defun g() (makunbound 'x) (f))
   ((lambda (x) (declare (special x)) (g)) 2))
 ->変数が定義されていません: x
----
http://snmsts.dreamhosters.com/wiki/?%C6%FC%B5%AD%A4%C3%A4%DD%A4%AF%2F2007-03-30#n00c7408
> makunbound
> 
> なるほどより直截ですな。
> でも挙動はしっかり違うしuninternの方が使いでがあると思った。
> あれやらこれやら実際に使う段にしないと工夫しようがないけど。
> lexicalな束縛の存在を確認する手段は無いのかなぁと思ったのだけれども、
> 実験以外の使いみちが解らんね。
> 同様に環境のレキシカルな束縛*だけ*を崩壊させる方法も使いみちが無いので必要がない。と
> あれば知りたい。
----
- とりあえず抜き出し。uninternの動作についてはしっくりきていないのでCLtL2を確認したいところなんですが、ちょっと時間がないという状況。 -- [[NANRI]] &new{2007-04-03 (火) 21:17:43};

#comment
