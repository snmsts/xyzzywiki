#freeze
#contents

*キーボードマクロとかってどうでしょ？ [#x3b7829c]

**前口上 [#lcc52146]

キーボードマクロは実はめったに使わなかったりするような気がするんだけど……。他のエディタにもある事が多いので、簡単に説明します。その前に、いつものように、キーバインドの話を少し。

''C-u''というキーバインドがあります。Helpからキー割り当て一覧を見てみると、''universal-argument''と書かれていて、いまいち意味が分かりにくいですね。((実際にC-uだけを押してみても、特に何も起こりません))実はC-uは、それだけを押しただけでは、意味の無いキーバインドなんです。このキーは''他のキーと一緒に使った時に効果を発揮''します。具体的には、C-uの後に他のキーを押します。

例えば、C-uをC-nと一緒に使って、C-u C-nとキーを押したとします。すると、通常C-nを押した時には、カーソル位置は1行下に移動しますが、それが''4''行下に移動します。C-uの後にC-pとすれば、逆に''4''行上に移動するようになります。

このC-uのキーは、その後に指定したキーを任意の数だけ実行するためのキーです。特に指定しなければ4倍します。上記の例はC-n（1行下に移動）をC-uで4倍したので4行移動したわけです。また、C-u C-u C-nと指定すると、C-nを16回（=4×4）します。C-u C-u C-u C-nとすると、64（=4^3）です。

実はこのC-uは、任意の数だけ行わせることもできます。例えば、 ''C-u 12345 C-mと指定すると、12345行改行''されます。（行番号を表示してやってみるとわかりやすいです）


#br
#br

CENTER:''C-u 12345と入力''
CENTER:#ref(01.png,center,50%)
CENTER:#img(,clear)
CENTER:&size(10){ステータスバーにC-u 1 2 3 4 5と入力されています。};

#br
#br

#br
#br

CENTER:''その後、C-mを入力''
CENTER:#ref(02.png,center,50%)
CENTER:#img(,clear)
CENTER:&size(10){改行が12345回入力されます。};

#br
#br

もっというと、細かくいろいろ出来る（みたいだけど）いまいち自分が分かっていないので、ここまでの説明にしておきます(^^;;

**キーボードマクロってなあに？ [#f6df82d6]

キーボードマクロというのは、キーボードから入力したキーを記録し、後で再生してくれる機能です。普段は、自分で文字を打ち込んでいるわけですが、キーボードマクロを使えば、いつもする定型的な作業を記録させておく事で 自動で編集を行えるようになります。

説明をうだうだするよりも、やってみた方が早いんでやってみます。

***やってみる [#r3b26d3e]

では実際にやってみます。まずは簡単なところから。

***操作を記録して保存する [#gdbc90e7]

xyzzyを起動して、編集しても大丈夫なファイルを用意します。（*scratch*バッファとか、新規に作成したファイルとか）
そしたら準備完了です。早速キーボードマクロを試してみます。

まず、キーボードの記録を開始します。 ツール（T）→キーボードマクロ記録開始（S）を選んでください。以下のような感じです。

#br
#br

CENTER:''キーボードマクロを開始する''
CENTER:#ref(03.png,center,50%)
CENTER:#img(,clear)
CENTER:&size(10){そのまんまです。};

#br
#br

ちなみに、一度キーボードマクロ開始（S）を選択すると、他のメニューバーのコマンドを選択する事が出来なくなります。

とりあえず最初なので、Enterキーを4回押し、改行を入れてみます。そして、記録を終了します。開始時と同様に、ツール（T）→キーボードマクロ記録終了（E）を選びます。

#br
#br

CENTER:''4回改行する''
CENTER:#ref(04.png,center,50%)
CENTER:#img(,clear)
CENTER:&size(10){改行を入れ終わったら……};

#br
#br

#br
#br

CENTER:''キーボードマクロの記録を終了''
CENTER:#ref(05.png,center,50%)
CENTER:#img(,clear)
CENTER:&size(10){そのまんまだけど。};

#br
#br

***操作を再生する [#o3b0a42c]

記録した操作を再生するには、 ツール（T）→キーボードマクロ実行（X）を選択します。簡単ですね。実際に押してみれば、さっき保存した改行を4回入力するキーボードマクロが再生されます。

さらにもう一度再生すれば、さらに4回改行が入力されます（当たり前だけど……）

**おおざっぱには以上みたいな機能 [#zc0d6c44]

上の例（だけ）だと、いまいち実用性に欠けるもしれませんが、だいたい感じがつかめたと思います。データを何行かおきに改行して区切りのマークをつける（例えば★★★とかで）などの作業を行う分には、以上のようにやればオッケーです。（他の方法でも出来るような気がするけど、この方法が多分一番楽）
また、実際に行う時には、1回分の作業で記録するよりも、もっと多い回数分を記録した方が、繰り返す回数が少なくてすむので楽でしょうね。

**メニューを詳しく紹介 [#c27b304b]

キーボードマクロ関連でメニューバーから選べるものを簡単に説明します。

#br
#br

CENTER:''キーボードマクロのメニュー''
CENTER:#ref(06.png,center,50%)
CENTER:#img(,clear)
CENTER:&size(10){ちなみにこの辺りの事です};

#br
#br

|>|メニュー項目				|一言説明|h
|>|キーボードマクロ記録開始（S）	|キーボードマクロの記録を開始する。M-x start-kbd-macroと同じ。記録を開始すると、メニューバー上でキーボードマクロ記録終了以外のコマンドを選択できなくなる。|
|>|キーボードマクロ記録終了（E）	|記録中だったキーボードマクロを記録して、記録を終了する。 M-x end-kbd-macroと同じ。|
|>|キーボードマクロ実行（X）		|最後に記録したキーボードマクロを実行する。 M-x call-last-kbd-macroと同じ。|
|キーボードマクロオプション（O）...	|保存（V）...|最後に記録したキーボードマクロを保存する。[[こんな感じのダイアログ>QuickTour/キーボードマクロ/保存ダイアログ]]が出て、何個も保存できるようになる。編集は[[読み込み（L）...のダイアログ>QuickTour/キーボードマクロ/読み込みダイアログ]]から行える。 M-x save-last-kbd-macroと同じ。|
|~|読み込み（L）...			|保存したキーボードマクロを読み込む。実際には[[こんなダイアログ>QuickTour/キーボードマクロ/読み込みダイアログ]]が表示され、読み込み以外にも、実行と削除が行える。（削除は確認のダイアログが表示されないので注意） M-x load-kbd-macroと同じ。|
|~|ファイルへ保存（S）...		|上記で保存してあるキーボードマクロのリストをファイルに保存する。詳しくは /lisp/kbdmacro.l参照。M-x save-kbd-macro-to-fileと同じ。|

またファイルを読み込むには、 ''M-x load-file''で読み込めば良いようです。左のを入力後、C-x C-fの時みたいに読み込むファイルをミニバッファで指定するので、そこで前もって保存しておいたキーボードマクロのファイルを読み込めば、ダイアログから指定できるようになります。

ダイアログ経由で保存したんだから、何となくダイアログ経由で読み込みたいなぁ、と思ったりもするんだけど……。

**幾つかの注意点 [#n8b97bcc]

注意する点が幾つかあります。（あまり気をつけなくても大丈夫なやつとか、そもそも注意しなくても良いんじゃ？という物も入ってるけど）

- 複雑な制御は（結構）むずかしい
- マクロの記録中はメニューを利用できない（ミニバッファはオッケー）
- xyzzyがそもそも認識しないキーがある
- もちろんマウスはダメ
- もちろんxyzzy以外のアプリケーションはダメ

といった所です。順に説明します。

***複雑な制御は（結構）むずかしい [#b029d2f2]

例で見てきたように、単純に4行改行を入れるとかは簡単に行えますけど、細かい事をするのはかなり難しいです。（やって出来ない事は無いのかもしれないけど……）

例えば、行頭に1を入れて、その次の行に2を入れて……、と番号を振っていくような作業をするのは難しいです。キーボードマクロで行おうとすれば、C-a 1 C-n C-a 2みたいな事をずっとしていけばいいわけですが、マクロを記録し終わった時には番号が既に振り終わっています(^^;;
まぁ、他のファイル（とか）でも使う場合があるなら、記録しておけば便利かもしれませんけど、あまりに複雑な作業をキーマクロで行う事は難しいだろうと思います。（条件分岐がある処理は無理。おそらく）

そういった事をするには、Lispを書くのが良いような気がしますけど、実際自分が書けないのでなんとも言えなかったり……。（xyzzy上で行わずともExcelやPerlとか、好きなものでやるのが良いのではないでしょうか)

***マクロの記録中はメニューを利用できない（ミニバッファはOK） [#gc98f3ee]

上でも触れましたけど、メニューバーをマウスで選択できなくなります。ミニバッファで対応するコマンドを入力すれば問題ないのですが、一部のコマンドでは入力した場合に、''キーボードマクロの記録が終了してしまう''ことがあるので注意してください。
例えば、 ''M-x grep-dialog''などでダイアログ系を呼び出すコマンドを入力した時には終了してしまいます。他にも幾つかあるかもしれません。

***xyzzyがそもそも認識しないキーがある [#b08ad782]

マクロを記録する時に、xyzzyがそもそも認識しないキーが含まれていた場合、そのキーは無視して記録されます。その「xyzzyがそもそも認識してくれないキー」とは、例えば、 ''変換キー''とか、''無変換キー''とかです。またCtrl-Tab等は（通常ならば）OSのアプリケーションの切り替え用に使われているのでxyzzy側では認識せず、キーボードマクロ上では使用できません。((.xyzzyに書いておけば認識させるようにすることもできます。))

Ctrl（やM）とアルファベットを組み合わせたキーや、普通のアルファベットのキー、ファンクションキー（など）ならば使用可能です。キーが使えるかどうかを調べるには、ヘルプ（？）→最近入力したキー（L）で調べる事が出来ます。キーを叩いたのに表示されていない場合には、そのキーは使えないと思います。これはxyzzy側の問題なので、キーボードマクロ固有の問題ではありません。どうしても行いたいのなら、キーボードのカスタマイズをするソフト((例えば窓使いの憂鬱など。))を使えば出来るようになると思います。

***もちろんマウスはダメ [#hf96fb4f]

キーボードマクロと言うくらいなので、マウスの動きは記録していません。（当たり前かもしれないけど）

***もちろんxyzzy以外のアプリケーションはダメ [#w3a472ca]

xyzzy以外のアプリケーションのキーボード操作は覚えていません。xyzzyからフォーカスが離れた時には、（その操作がいくらキーボードのみの操作であっても）記録していません。

マウスを使用したり、他のアプリケーションでも自動化を行いたい場合には、UWSC等のWindows上での操作を記録してくれるアプリケーションを使うと良いかもしれません。

**こういった時に便利 [#oddce455]

逆に言えば、以下の条件の時にはキーボードマクロは便利に使えるといえます。

- 簡単なルーチン作業（手順が複雑では無い。例外的な作業が無い）
- キー操作の組み合わせだけで行える
- xyzzyの中だけで完結する
- （プログラムを書く人の場合）LispやPerlなどを書くよりも実際にやった方が楽なんだけど、その作業量が膨大でやる気が無い時
- （めったに使わなくてキーバインドを覚えておくのが面倒な機能とか）

辺りだと思います。四つ目の「（プログラム〜〜」ってのは、自分がプログラムを書く人間ではないので想像ですが。（なかなか想像しにくいシチュエーションではある(^^;;）
五つ目は、キーバインドよりもキーボードマクロのダイアログから視覚的に選択できるので、いちいち M-x aproposしなくても便利かもしれないって事で付けてあります。めったに使わないキーバインドだけど、あると便利なものをキーボードマクロで記録しておくと便利かも知れません。
（個人的には、キーバインドだけで何とかできるけどその数が膨大な時に使うと一番便利かなぁ、と思います）

**コマンド版はLispを書く人向け（かも） [#e88c85a1]

例では、メニューバーからキーボードマクロを操作していましたけど、ミニバッファからコマンドを打つ事でも呼び出せます。メニューバーから呼び出せるものは上に書いたとおりですが、ミニバッファからのみ使用できるコマンドも存在します。''M-x name-last-kbd-macro''と、''M-x insert-kbd-macro''がそれです。

name-last-kbd-macroは、その名の通り、最後に記録したマクロを名前をつけておくものです。ダイアログで保存するコマンド（save-last-kbd-macro）とは違う場所に保存されます。また、保存したマクロはinsert-kbd-macroからのみ呼び出せ、一度xyzzyを終了させたら呼び出せなくなります。（ダイアログ版のは次回起動時の時にも記憶されていて呼び出せます。）

insert-kbd-macroは、name-last-kbd-macroで登録したキーボードマクロを呼び出すためのコマンドです。このコマンドで呼び出すとマクロを実行するのではなく、アクティブなバッファにマクロのコードをLisp形式で出力します。具体的には以下のように出力します。

  (setf (symbol-function 'trial)
  "aaaa^Mbbbb^Mcccc^M")

上記のコードは、aaaa[Return]bbbb[Return]cccc[Return]を登録したものです。((aaaaで改行してbbbbで改行してccccで改行して、と言うこと。))(symbol-function 'trial）のtrialの部分がname-last-kbd-macroの時に登録した名前になります。insert-kbd-macroで呼び出す時にもこの名前を入力します。

Lisp書く人向けには何か（ソースの中に埋め込む時とか？）に便利かもしれないけど、普通に使う人には余り使うことが無いかもしれないですね。

**キーの記録開始と記録終了を同じキーバインドにする [#ec55fa47]

黒い羽根さんのページにキーボードマクロの開始・終了を同じキーに割り当てるというものがあります。キーボードマクロの記録開始と終了が何で同じでないの？？、と不便に思っている人にオススメです。

使い方は簡単で、最後の

 (global-set-key #\S-F1 'startend-kbd-macro)

の部分がキーボードマクロの開始・終了のキーバインドを設定している所なので、自分の好きなように変更すればオッケーです。（上記の場合には、Shift-F1でキーボードマクロの記録・終了が行えます）
そこを自分の好きなキーバインドに変更したものを.xyzzyかsiteinit.lに書けば良いだけです。siteinit.lに書いた場合には、バイトコンパイルや、ダンプファイルを作り直すのを忘れないようにしましょう。
- [[tips/キーボードマクロを便利に]]

**大体終了 [#oa760037]

したかな。あんまり書くことが無いので、内容が薄かったな。あ、ちなみにキーボードマクロを連続して行いたい場合には、先頭に紹介した''C-u''を使って、''C-u C-x e''とするとキーボードマクロを4回やってくれます。C-uを二回にすれば16回となっていきます。一緒に使うと色々と楽できるかと思います。
