* misc.lいろいろ [#sfea458d]

-ページ: [[リファレンスにツッコミを入れる]]
-投稿者: 名無しさん
-優先順位: 低
-状態: 完了
-カテゴリー: 新規項目
-投稿日: 2005-11-20 (日) 19:44:06
-バージョン: 

** メッセージ [#he5f12f4]
書けそうな範囲で。エラーとか詳細がよくわからないのでパスしました。minibuffer-messageとかwith-set-bufferとかも正しい使い方はよくわかってませんが一応。
 <chapter>
 <title>clear-minibuffer-message</title>
 <type>Function</type>
 <arguments>clear-minibuffer-message</arguments>
 <package>editor</package>
 <description>
 ミニバッファに表示された文字列を消去します。
 </description>
 <seealso>minibuffer-message</seealso>
 <seealso>minibuffer-prompt</seealso>
 <link></link>
 <section>ミニバッファ</section>
 <file>misc.l</file>
 </chapter>

 <chapter>
 <title>minibuffer-message</title>
 <type>Function</type>
 <arguments>minibuffer-message FMT &amp;rest ARGS</arguments>
 <package>editor</package>
 <description>
 書式に従ってミニバッファにメッセージを表示します。 
 ミニバッファにカーソルが表示されない以外は minibuffer-prompt と同じ？
 
   FMT  : format 同様の書式
   ARGS : 出力書式へのパラメタ
 </description>
 <seealso>clear-minibuffer-message</seealso>
 <seealso>minibuffer-prompt</seealso>
 <seealso>format</seealso>
 <link></link>
 <section>ミニバッファ</section>
 <file>misc.l</file>
 </chapter>

 <chapter>
 <title>with-interval-message</title>
 <type>Macro</type>
 <arguments>with-interval-message (INTERVAL) &amp;body BODY</arguments>
 <package>editor</package>
 <description>
 BODY 内で message コマンドによる表示の更新間隔を制限します。
 
   INTERVAL : 表示の最低更新間隔（ミリ秒）。
              前回 message を実行したときから INTERVAL ミリ秒以上経過していない場合、
              新たなメッセージを表示しません。
 
 使用例:
   ;; 更新間隔を 100 ミリ秒にしてみる。
   (with-interval-message (100)
     (dotimes (i 100000)
       (message "~D" i)))
 </description>
 <seealso>message</seealso>
 <link></link>
 <section>入出力</section>
 <file>misc.l</file>
 </chapter>

 <chapter>
 <title>with-selected-window</title>
 <type>Macro</type>
 <arguments>with-selected-window &amp;body BODY</arguments>
 <package>editor</package>
 <description>
 BODY の前後でカレントウィンドウを保存します。
 すなわち、BODY 実行中にウィンドウを移動しても、実行後に元のウィンドウに戻ります。
 </description>
 <seealso>set-window</seealso>
 <seealso>save-window-excursion</seealso>
 <link></link>
 <section>ウィンドウ</section>
 <file>misc.l</file>
 </chapter>

 <chapter>
 <title>with-set-buffer</title>
 <type>Macro</type>
 <arguments>with-set-buffer &amp;body BODY</arguments>
 <package>editor</package>
 <description>
 BODY を実行する際に、ポイントがミニバッファ以外にあることを保証します。
 ポイントがミニバッファにあった場合、BODY を実行した後ポイントはミニバッファに戻ります。
 
 ミニバッファで set-buffer するとエラーが起きるので、それを回避するためにあるようです。
 
 使用例:
   ;; lisp/misc.l より
   (defun setup-temp-buffer (buffer)
     (with-set-buffer
       (save-excursion
         (set-buffer buffer)
         (setq buffer-read-only nil)
         (setq need-not-save t)
         (setq kept-undo-information nil)
         (setq auto-save nil))))
 </description>
 <seealso>set-buffer</seealso>
 <link></link>
 <section>バッファ</section>
 <file>misc.l</file>
 </chapter>

 <chapter>
 <title>toggle-trace-on-error</title>
 <type>Function</type>
 <arguments>toggle-trace-on-error &amp;optional (ARG () SVAR)</arguments>
 <package>editor</package>
 <description>
 エラーをトレースするかどうかをトグルします。
 On にする時にトレース用のバッファ *Trace Output* が無ければ新しく作ります。
 
 前置引数をつけた場合、toggle-mode と同じような挙動をします。
 </description>
 <seealso>ed::toggle-mode</seealso>
 <link></link>
 <section>エラー</section>
 <file>misc.l</file>
 </chapter>

 <chapter>
 <title>trap-errors</title>
 <type>Macro</type>
 <arguments>trap-errors &amp;body BODY</arguments>
 <package>editor</package>
 <description>
 BODY 内でエラーが起こった場合もしくは中断（quit）された場合、
 キャッチして trap-errors の外に影響がでないようにします。
 handler-case の簡易版といえます。
 ignore-errors と違い、エラーが発生したら表示されます。
 
 使用例:
   ;; エラーが起きたらとりあえずキャッチして、その後の処理は続ける。
   (progn
     (trap-errors
       (/ 1 0))
     (msgbox "done."))
 </description>
 <seealso>handler-case</seealso>
 <seealso>ignore-errors</seealso>
 <link></link>
 <section>エラー</section>
 <file>misc.l</file>
 </chapter>

 <chapter>
 <title>setup-temp-buffer</title>
 <type>Function</type>
 <arguments>setup-temp-buffer BUFFER</arguments>
 <package>editor</package>
 <description>
 BUFFER を一時バッファ用に初期化します。
 具体的には以下のようにバッファローカル変数を設定します。
 
   buffer-read-only      -&gt; nil
   need-not-save         -&gt; t
   kept-undo-information -&gt; nil
   auto-save             -&gt; nil
 </description>
 <seealso>buffer-read-only</seealso>
 <seealso>need-not-save</seealso>
 <seealso>kept-undo-information</seealso>
 <seealso>auto-save</seealso>
 <link></link>
 <section>バッファ</section>
 <file>misc.l</file>
 </chapter>

 <chapter>
 <title>execute-extended-command</title>
 <type>Function</type>
 <arguments>execute-extended-command COMMAND &amp;optional RAW ARG</arguments>
 <package>editor</package>
 <description>
 ミニバッファからコマンドを対話的に入力して実行します。[ESC x]
 </description>
 <seealso>command-execute</seealso>
 <link></link>
 <section>評価</section>
 <file>misc.l</file>
 </chapter>

 <chapter>
 <title>load-file</title>
 <type>Function</type>
 <arguments>load-file FILENAME</arguments>
 <package>lisp</package>
 <description>
 ファイルを対話的に読み込みます。
 load-library と異なり、*load-path* にないファイルも読み込めます。
 </description>
 <seealso>load-library</seealso>
 <seealso>load</seealso>
 <link></link>
 <section>評価</section>
 <file>misc.l</file>
 </chapter>

 <chapter>
 <title>cd</title>
 <type>Function</type>
 <arguments>cd DIRECTORY</arguments>
 <package>editor</package>
 <description>
 バッファが作業しているディレクトリをインタラクティブに変更します。
 </description>
 <seealso>set-default-directory</seealso>
 <link></link>
 <section>ファイルシステム</section>
 <file>misc.l</file>
 </chapter>

 <chapter>
 <title>clear-message</title>
 <type>Function</type>
 <arguments>clear-message</arguments>
 <package>editor</package>
 <description>
 ステータスバーのメッセージを消去します。
 </description>
 <seealso>message</seealso>
 <link></link>
 <section>入出力</section>
 <file>misc.l</file>
 </chapter>

 <chapter>
 <title>vconcat</title>
 <type>Function</type>
 <arguments>vconcat &amp;rest SEQ</arguments>
 <package>editor</package>
 <description>
 ベクタを連結します。
 
 使用例:
   (vconcat #(1 3) #(2 5 7))
   =&gt; #(1 3 2 5 7)
 </description>
 <seealso>concatenate</seealso>
 <link></link>
 <section>配列</section>
 <file>misc.l</file>
 </chapter>

 <chapter>
 <title>mc-autoload</title>
 <type>Function</type>
 <arguments>mc-autoload FN FILE &amp;optional COMMANDP MACROP ENCODING</arguments>
 <package>lisp</package>
 <description>
 Shift-JIS 以外のエンコーディングのファイルに定義された関数を autoload するよう設定します。
 
   FN       : 関数シンボル
   FILE     : 関数が定義されたファイル名
   COMMANDP : interactive 関数かどうか
   MACROP   : マクロかどうか
   ENCODING : FILE を読み込む際のエンコーディング
 </description>
 <seealso>autoload</seealso>
 <seealso>mc-load-library</seealso>
 <seealso>mc-load-file</seealso>
 <link></link>
 <section>評価</section>
 <file>misc.l</file>
 </chapter>

 <chapter>
 <title>mc-load-library</title>
 <type>Function</type>
 <arguments>mc-load-library FILENAME &amp;key :encoding :no-suffix (:if-does-not-exist :error)</arguments>
 <package>lisp</package>
 <description>
 Shift-JIS 以外のエンコーディングのファイルを読み込みます。
 
   FILENAME           : ファイル名
   :encoding          : 読み込むファイルのエンコーディング
   :no-suffix         : ファイルを *load-path* から探すかどうか指定します。
         t                ファイルを find-load-path で探します。
         nil              FILENAME をそのまま使います。
   :if-does-not-exist : ファイルが見つからなかった場合の挙動を指定します。
         :error           エラーを返します。デフォルトの挙動です。
         それ以外         nil を返します。
 </description>
 <seealso>load-library</seealso>
 <seealso>mc-autoload</seealso>
 <seealso>mc-load-file</seealso>
 <link></link>
 <section>評価</section>
 <file>misc.l</file>
 </chapter>

 <chapter>
 <title>mc-load-file</title>
 <type>Function</type>
 <arguments>mc-load-file FILENAME &amp;optional ENCODING</arguments>
 <package>lisp</package>
 <description>
 Shift-JIS 以外のエンコーディングのファイルを読み込みます。
 mc-load-library と違い、*load-path* にないファイルも読み込めます。
   
   FILENAME : ファイル名（フルパス）
   ENCODING : 読み込むファイルのエンコーディング
 </description>
 <seealso>load-file</seealso>
 <seealso>mc-autoload</seealso>
 <seealso>mc-load-library</seealso>
 <link></link>
 <section>評価</section>
 <file>misc.l</file>
 </chapter>

--------
- mc-はsjisでないコードを判定する関数みたいですよ。Changelog.html参照 -- [[佐野]] &new{2005-11-20 (日) 19:58:44};
- なるほど、そういうことでしたか。というわけでmcのやつも書いてみました。mcが何の略なのかはやっぱりわかりませんが。 --  &new{2005-11-20 (日) 21:52:15};
- どーもです。mc-*系はバイトコンパイル済みのコードとの兼ね合いがよく分かりませんね。mc-*でバイトコンパイルしておく必要があるのかないのか。その他もろもろ。 -- [[NANRI]] &new{2005-11-20 (日) 23:01:37};
- 取り込みました。 -- [[NANRI]] &new{2005-12-12 (月) 02:34:01};

#comment
